
// Generated by CoffeeScript 1.6.3
define('editor_tools/scriptable_toolbar',['require'],function(require) {
  var $, ScriptableToolbar;
  if (typeof $ === "undefined" || $ === null) {
    $ = jQuery;
  }
  return ScriptableToolbar = (function() {
    function ScriptableToolbar(parent, interpreter, root_path) {
      this.interpreter = interpreter;
      this.root_path = root_path;
      this.menuMap = {};
      this.initVisual(parent);
    }

    ScriptableToolbar.prototype.addItem = function(section, itemName, imghRef, helpText, clear) {
      var item, me;
      if (helpText == null) {
        helpText = "";
      }
      if (clear == null) {
        clear = false;
      }
      me = this;
      item = $("<div>").addClass("ribbon-button").attr("style", "float:left");
      if (clear) {
        item.attr("style", item.attr("style") + ";clear:both");
      }
      item.append($("<span>").addClass("button-help").text(helpText));
      item.append($("<img>").addClass("ribbon-icon").attr("src", this.root_path + imghRef));
      $(item).click(function() {
        var impl;
        impl = me.interpreter.getImplementation(itemName);
        if (impl == null) {
          return;
        }
        return impl();
      });
      $(item).mousedown(function(evt) {
        if (evt.which !== 3) {
          return;
        }
        return console.log(itemName);
      });
      return section["__itemRoot__"].append(item);
    };

    ScriptableToolbar.prototype.addSection = function(menu, sectionName) {
      var itemRoot;
      if (menu[sectionName] != null) {
        return menu[sectionName];
      }
      itemRoot = $("<div>").addClass("ribbon-section");
      itemRoot.append($("<span>").addClass("section-title").text(sectionName));
      menu["__sectionRoot__"].append(itemRoot);
      return menu[sectionName] = {
        __itemRoot__: itemRoot
      };
    };

    ScriptableToolbar.prototype.addMenu = function(name) {
      var tab;
      if (this.menuMap[name] != null) {
        return this.menuMap[name];
      }
      tab = $("<div>").addClass("ribbon-tab");
      tab.append($("<span>").addClass("ribbon-title").text(name));
      this.ribbon.append(tab);
      return this.menuMap[name] = {
        __sectionRoot__: tab
      };
    };

    ScriptableToolbar.prototype.initVisual = function(parent) {
      this.ribbon = $("<div>").addClass("ribbon").append($("<span>").addClass("ribbon-window-title"));
      return parent.append(this.ribbon);
    };

    ScriptableToolbar.prototype.loadLayout = function(data) {
      var itemData, itemName, menu, menuData, name, section, sectionData, sectionName;
      if (typeof data === "string") {
        data = JSON.parse(data);
      }
      for (name in data) {
        menuData = data[name];
        menu = this.addMenu(name);
        for (sectionName in menuData) {
          sectionData = menuData[sectionName];
          section = this.addSection(menu, sectionName);
          for (itemName in sectionData) {
            itemData = sectionData[itemName];
            this.addItem(section, itemName, itemData["href"], itemData["help"], itemData["clear"]);
          }
        }
      }
      return null;
    };

    return ScriptableToolbar;

  })();
});

// Generated by CoffeeScript 1.6.3
define('editor_tools/interpretter',['require'],function(req) {
  var Interpreter;
  return Interpreter = (function() {
    function Interpreter(editor) {
      var _this;
      this.editor = editor;
      _this = this;
      this.env = {};
    }

    Interpreter.prototype.hasImplementation = function(item) {
      return this.env[item] != null;
    };

    Interpreter.prototype.getImplementation = function(cmd) {
      return this.env[cmd];
    };

    Interpreter.prototype.exec = function(script) {
      var e, s;
      try {
        eval("with (this.env) { script(); }");
      } catch (_error) {
        e = _error;
        s = e;
      }
      if ((s != null) && (s.toString != null)) {
        return s.toString();
      }
    };

    Interpreter.prototype.autocomplete = function(string, callback) {
      var prop, results;
      results = [];
      for (prop in this.env) {
        if (prop.indexOf(string) === 0) {
          results.push(prop);
        }
      }
      return callback(results);
    };

    Interpreter.prototype.loadScript = function(editor, env, api) {
      return function(t) {
        return env[api] = function() {
          return t(editor);
        };
      };
    };

    Interpreter.prototype.loadAPI = function(data) {
      var api, editor, env, prop, r;
      if (typeof data === "string") {
        data = JSON.parse(data);
      }
      env = this.env;
      editor = this.editor;
      for (prop in data) {
        api = "scripts/" + prop + "-" + data[prop]["repo"] + "-" + data[prop]["version"] + ".js";
        r = require([require.toUrl(api)], this.loadScript(editor, env, prop));
      }
      return env;
    };

    return Interpreter;

  })();
});

// Generated by CoffeeScript 1.6.3
define('editor_tools/main',['require','editor_tools/scriptable_toolbar','editor_tools/interpretter'],function(require) {
  var $, Interpretter, Toolbar;
  if (typeof $ === "undefined" || $ === null) {
    $ = jQuery;
  }
  Toolbar = require("editor_tools/scriptable_toolbar");
  Interpretter = require("editor_tools/interpretter");
  return {
    enrich_editor: function(editor, id, root_path) {
      var header, interpretter, layout, terminal, toolbar, wrapped;
      if (root_path == null) {
        root_path = "";
      }
      wrapped = $(id).wrap("<div>").parent();
      $(id).addClass("ui-layout-center");
      header = $("<div>").addClass("ui-layout-north");
      terminal = $("<div>").addClass("ui-layout-south");
      wrapped.prepend(header);
      wrapped.append(terminal);
      layout = null;
      interpretter = new Interpretter(editor);
      toolbar = new Toolbar(header, interpretter, root_path);
      return {
        toolbar: toolbar,
        interpretter: interpretter,
        editor: editor,
        header: header
      };
    }
  };
});
