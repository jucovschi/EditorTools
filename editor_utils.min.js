
// Generated by CoffeeScript 1.4.0

define('editor_tools/scriptable_toolbar',['require'],function(require) {
  var $, ScriptableToolbar;
  if (!(typeof $ !== "undefined" && $ !== null)) {
    $ = jQuery;
  }
  return ScriptableToolbar = (function() {

    function ScriptableToolbar(parent, interpretter) {
      this.interpretter = interpretter;
      this.menuMap = {};
      this.initVisual(parent);
    }

    ScriptableToolbar.prototype.addItem = function(section, itemName, imghRef, helpText, clear) {
      var item, me, noimpl;
      if (helpText == null) {
        helpText = "";
      }
      if (clear == null) {
        clear = false;
      }
      me = this;
      item = $("<div>").addClass("ribbon-button").attr("style", "float:left");
      if (clear) {
        item.attr("style", item.attr("style") + ";clear:both");
      }
      item.append($("<span>").addClass("button-help").text(helpText));
      noimpl = "";
      if (this.interpretter.hasImplementation(itemName)) {
        noimpl = "ribbon-noimpl";
      }
      item.append($("<img>").addClass("ribbon-icon").addClass(noimpl).attr("src", imghRef));
      $(item).click(function() {
        return me.interpretter.exec(itemName + "();");
      });
      $(item).mousedown(function(evt) {
        if (evt.which !== 3) {
          return;
        }
        return console.log(itemName);
      });
      return section["__itemRoot__"].append(item);
    };

    ScriptableToolbar.prototype.addSection = function(menu, sectionName) {
      var itemRoot;
      if (menu[sectionName] != null) {
        return menu[sectionName];
      }
      itemRoot = $("<div>").addClass("ribbon-section");
      itemRoot.append($("<span>").addClass("section-title").text(sectionName));
      menu["__sectionRoot__"].append(itemRoot);
      return menu[sectionName] = {
        __itemRoot__: itemRoot
      };
    };

    ScriptableToolbar.prototype.addMenu = function(name) {
      var tab;
      if (this.menuMap[name] != null) {
        return this.menuMap[name];
      }
      tab = $("<div>").addClass("ribbon-tab");
      tab.append($("<span>").addClass("ribbon-title").text(name));
      this.ribbon.append(tab);
      return this.menuMap[name] = {
        __sectionRoot__: tab
      };
    };

    ScriptableToolbar.prototype.initVisual = function(parent) {
      this.ribbon = $("<div>").addClass("ribbon").append($("<span>").addClass("ribbon-window-title"));
      return parent.append(this.ribbon);
    };

    ScriptableToolbar.prototype.loadLayout = function(data) {
      var itemData, itemName, menu, menuData, name, section, sectionData, sectionName;
      for (name in data) {
        menuData = data[name];
        menu = this.addMenu(name);
        for (sectionName in menuData) {
          sectionData = menuData[sectionName];
          section = this.addSection(menu, sectionName);
          for (itemName in sectionData) {
            itemData = sectionData[itemName];
            this.addItem(section, itemName, itemData["href"], itemData["help"], itemData["clear"]);
          }
        }
      }
      return null;
    };

    return ScriptableToolbar;

  })();
});

// Generated by CoffeeScript 1.4.0

define('editor_tools/interpretter',['require'],function(req) {
  var Interpreter;
  return Interpreter = (function() {

    function Interpreter(editor) {
      this.editor = editor;
      this.env = {};
    }

    Interpreter.prototype.hasImplementation = function(item) {
      return this.env[item] != null;
    };

    Interpreter.prototype.exec = function(script) {
      var s;
      try {
        eval("with (this.env) { s = eval(script); }");
      } catch (e) {
        s = e;
      }
      if ((s != null) && (s.toString != null)) {
        return s.toString();
      }
    };

    Interpreter.prototype.autocomplete = function(string, callback) {
      var prop, results;
      results = [];
      for (prop in this.env) {
        if (prop.indexOf(string) === 0) {
          results.push(prop);
        }
      }
      return callback(results);
    };

    Interpreter.prototype.loadAPI = function(data) {
      var api, editor, env, prop, r, _results;
      env = this.env;
      editor = this.editor;
      _results = [];
      for (prop in data) {
        api = "scripts/" + prop + "-" + data[prop]["repo"] + "-" + data[prop]["version"] + ".js";
        _results.push(r = require([api], function(t) {
          return env[prop] = function() {
            return t(editor);
          };
        }));
      }
      return _results;
    };

    return Interpreter;

  })();
});

// Generated by CoffeeScript 1.4.0

define('editor_tools/main',['require','editor_tools/scriptable_toolbar','editor_tools/interpretter'],function(require) {
  var $, Interpretter, Toolbar;
  if (!(typeof $ !== "undefined" && $ !== null)) {
    $ = jQuery;
  }
  Toolbar = require("editor_tools/scriptable_toolbar");
  Interpretter = require("editor_tools/interpretter");
  return {
    enrich_editor: function(editor, id) {
      var header, interpretter, layout, termToggle, terminal, toolbar, wrapped;
      wrapped = $(id).wrap("<div>").parent();
      $(id).addClass("ui-layout-center");
      header = $("<div>").addClass("ui-layout-north");
      terminal = $("<div>").addClass("ui-layout-south");
      wrapped.prepend(header);
      wrapped.append(terminal);
      layout = null;
      jQuery(document).ready(function() {
        $(wrapped).width($(id).width());
        $(wrapped).height($(id).height());
        return layout = wrapped.layout({
          enableCursorHotkey: false,
          north: {
            closable: false,
            size: 120,
            resizable: false
          },
          south: {
            resizable: true,
            size: 80,
            initClosed: true
          }
        });
      });
      interpretter = new Interpretter(editor);
      toolbar = new Toolbar(header, interpretter);
      termToggle = function(evt) {
        if (evt.keyCode === 192 && evt.ctrlKey) {
          if (layout.state.south.isClosed) {
            layout.open("south");
            $(terminal).trigger("click");
            $(terminal).focus();
            editor.blur();
          } else {
            layout.close("south");
            editor.focus();
          }
          return false;
        }
      };
      $(terminal).terminal(function(command, term) {
        return term.echo(interpretter.exec(command));
      }, {
        greetings: "",
        tabcompletion: true,
        keyDown: termToggle,
        completion: function(terminal, string, callback) {
          return interpretter.autocomplete(string, callback);
        }
      });
      $(wrapped).keydown(termToggle);
      return {
        toolbar: toolbar,
        interpretter: interpretter,
        editor: editor,
        header: header
      };
    }
  };
});
