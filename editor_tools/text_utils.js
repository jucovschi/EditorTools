// Generated by CoffeeScript 1.4.0
var __slice = [].slice;

define(function(require) {
  var TextUtils;
  TextUtils = (function() {

    function TextUtils(editor) {
      this.editor = editor;
      this.editor.getText();
    }

    TextUtils.prototype.embbedSelectedText = function(prefix, suffix) {
      return this.embbedText(this.editor.getSelectedRange(), prefix, suffix);
    };

    TextUtils.prototype.focus = function() {
      return this.editor.focus();
    };

    TextUtils.prototype.insert = function(pos, text) {
      if (typeof pos === "string") {
        text = pos;
        pos = this.editor.getCursorPosition();
      }
      this.editor.insert(pos, text);
    };

    TextUtils.prototype.getPos = function() {
      return this.editor.getCursorPosition();
    };

    TextUtils.prototype.setPos = function(pos) {
      return this.editor.setCursorPosition(pos);
    };

    TextUtils.prototype.indentToNextLine = function(pos) {
      var iter, line, t;
      if (!(pos != null)) {
        pos = this.editor.getCursorPosition();
      }
      iter = this.editor.getLineIterator(pos);
      line = iter.getLine();
      t = line.match(/^[\s]*/);
      if (t != null) {
        t = t[0];
      } else {
        t = "";
      }
      if (t.length === line.length) {
        return;
      }
      return this.editor.insert(pos, "\n" + t);
    };

    TextUtils.prototype.getEol = function(pos) {
      var iter, toSkip;
      if (!(pos != null)) {
        pos = this.editor.getCursorPosition();
      }
      iter = this.editor.getLineIterator(pos);
      toSkip = iter.getLine().length - iter.getOffsetInLine();
      pos = this.editor.addPositionOffset(pos, toSkip);
      return pos;
    };

    TextUtils.prototype.searchReverse = function(pos, matchStr, callback) {
      var editor, iter, line, matchCallback, stop, _results;
      editor = this.editor;
      iter = editor.getLineIterator(pos);
      stop = false;
      matchCallback = function() {
        var foundOffset, m, posFound;
        m = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (stop) {
          return;
        }
        foundOffset = m[m.length - 2];
        posFound = editor.addPositionOffset(iter.getPos(), foundOffset);
        if (editor.isPositionBefore(pos, posFound)) {
          return;
        }
        if (callback(posFound, m) === false) {
          return stop = true;
        }
      };
      iter.getLine().replace(matchStr, matchCallback);
      _results = [];
      while (iter.hasPrevious()) {
        if (stop) {
          break;
        }
        line = iter.getPrevious();
        _results.push(line.replace(matchStr, matchCallback));
      }
      return _results;
    };

    TextUtils.prototype.embbedText = function(range, prefix, suffix) {
      if (range.isEmpty()) {
        return;
      }
      console.log(range);
      this.editor.insert(range.end, suffix);
      return this.editor.insert(range.start, prefix);
    };

    return TextUtils;

  })();
  return TextUtils;
});
