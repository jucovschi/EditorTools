// Generated by CoffeeScript 1.3.3
(function() {
  var Byte, Client, Frame, Stomp,
    __hasProp = {}.hasOwnProperty;

  Byte = {
    LF: '\x0A',
    NULL: '\x00'
  };

  Frame = (function() {

    function Frame(command, headers, body) {
      this.command = command;
      this.headers = headers != null ? headers : {};
      this.body = body != null ? body : '';
    }

    Frame.prototype.toString = function() {
      var lines, name, value, _ref;
      lines = [this.command];
      _ref = this.headers;
      for (name in _ref) {
        if (!__hasProp.call(_ref, name)) continue;
        value = _ref[name];
        lines.push("" + name + ":" + value);
      }
      if (this.body) {
        lines.push("content-length:" + ('' + this.body).length);
      }
      lines.push(Byte.LF + this.body);
      return lines.join(Byte.LF);
    };

    Frame._unmarshallSingle = function(data) {
      var body, chr, command, divider, headerLines, headers, i, idx, len, line, start, trim, _i, _j, _ref, _ref1;
      divider = data.search(RegExp("" + Byte.LF + Byte.LF));
      headerLines = data.substring(0, divider).split(Byte.LF);
      command = headerLines.shift();
      headers = {};
      trim = function(str) {
        return str.replace(/^\s+|\s+$/g, '');
      };
      line = idx = null;
      for (i = _i = 0, _ref = headerLines.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        line = headerLines[i];
        idx = line.indexOf(':');
        headers[trim(line.substring(0, idx))] = trim(line.substring(idx + 1));
      }
      body = '';
      start = divider + 2;
      if (headers['content-length']) {
        len = parseInt(headers['content-length']);
        body = ('' + data).substring(start, start + len);
      } else {
        chr = null;
        for (i = _j = start, _ref1 = data.length; start <= _ref1 ? _j < _ref1 : _j > _ref1; i = start <= _ref1 ? ++_j : --_j) {
          chr = data.charAt(i);
          if (chr === Byte.NULL) {
            break;
          }
          body += chr;
        }
      }
      return new Frame(command, headers, body);
    };

    Frame.unmarshall = function(datas) {
      var data;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = datas.split(RegExp("" + Byte.NULL + Byte.LF + "*"));
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          data = _ref[_i];
          if ((data != null ? data.length : void 0) > 0) {
            _results.push(Frame._unmarshallSingle(data));
          }
        }
        return _results;
      })();
    };

    Frame.marshall = function(command, headers, body) {
      var frame;
      frame = new Frame(command, headers, body);
      return frame.toString() + Byte.NULL;
    };

    return Frame;

  })();

  Client = (function() {

    function Client(ws) {
      this.ws = ws;
      this.ws.binaryType = "arraybuffer";
      this.counter = 0;
      this.connected = false;
      this.heartbeat = {
        outgoing: 10000,
        incoming: 10000
      };
      this.subscriptions = {};
    }

    Client.prototype._transmit = function(command, headers, body) {
      var out;
      out = Frame.marshall(command, headers, body);
      if (typeof this.debug === "function") {
        this.debug(">>> " + out);
      }
      return this.ws.send(out);
    };

    Client.prototype._setupHeartbeat = function(headers) {
      var serverIncoming, serverOutgoing, ttl, v, _ref, _ref1,
        _this = this;
      if ((_ref = headers.version) !== Stomp.VERSIONS.V1_1 && _ref !== Stomp.VERSIONS.V1_2) {
        return;
      }
      _ref1 = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = headers['heart-beat'].split(",");
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          v = _ref1[_i];
          _results.push(parseInt(v));
        }
        return _results;
      })(), serverOutgoing = _ref1[0], serverIncoming = _ref1[1];
      if (!(this.heartbeat.outgoing === 0 || serverIncoming === 0)) {
        ttl = Math.max(this.heartbeat.outgoing, serverIncoming);
        if (typeof this.debug === "function") {
          this.debug("send PING every " + ttl + "ms");
        }
        this.pinger = typeof window !== "undefined" && window !== null ? window.setInterval(function() {
          _this.ws.send(Byte.LF);
          return typeof _this.debug === "function" ? _this.debug(">>> PING") : void 0;
        }, ttl) : void 0;
      }
      if (!(this.heartbeat.incoming === 0 || serverOutgoing === 0)) {
        ttl = Math.max(this.heartbeat.incoming, serverOutgoing);
        if (typeof this.debug === "function") {
          this.debug("check PONG every " + ttl + "ms");
        }
        return this.ponger = typeof window !== "undefined" && window !== null ? window.setInterval(function() {
          var delta;
          delta = Date.now() - _this.serverActivity;
          if (delta > ttl * 2) {
            if (typeof _this.debug === "function") {
              _this.debug("did not receive server activity for the last " + delta + "ms");
            }
            return _this._cleanUp();
          }
        }, ttl) : void 0;
      }
    };

    Client.prototype.connect = function(login, passcode, connectCallback, errorCallback, vhost) {
      var _this = this;
      this.connectCallback = connectCallback;
      if (typeof this.debug === "function") {
        this.debug("Opening Web Socket...");
      }
      this.ws.onmessage = function(evt) {
        var arr, c, data, frame, onreceive, _i, _len, _ref, _results;
        data = typeof ArrayBuffer !== 'undefined' && evt.data instanceof ArrayBuffer ? (arr = new Uint8Array(evt.data), typeof _this.debug === "function" ? _this.debug("--- got data length: " + arr.length) : void 0, ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = arr.length; _i < _len; _i++) {
            c = arr[_i];
            _results.push(String.fromCharCode(c));
          }
          return _results;
        })()).join('')) : evt.data;
        _this.serverActivity = Date.now();
        if (data === Byte.LF) {
          if (typeof _this.debug === "function") {
            _this.debug("<<< PONG");
          }
          return;
        }
        if (typeof _this.debug === "function") {
          _this.debug("<<< " + data);
        }
        _ref = Frame.unmarshall(data);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          frame = _ref[_i];
          switch (frame.command) {
            case "CONNECTED":
              if (typeof _this.debug === "function") {
                _this.debug("connected to server " + frame.headers.server);
              }
              _this.connected = true;
              _this._setupHeartbeat(frame.headers);
              _results.push(typeof _this.connectCallback === "function" ? _this.connectCallback(frame) : void 0);
              break;
            case "MESSAGE":
              onreceive = _this.subscriptions[frame.headers.subscription];
              _results.push(typeof onreceive === "function" ? onreceive(frame) : void 0);
              break;
            case "RECEIPT":
              _results.push(typeof _this.onreceipt === "function" ? _this.onreceipt(frame) : void 0);
              break;
            case "ERROR":
              _results.push(typeof errorCallback === "function" ? errorCallback(frame) : void 0);
              break;
            default:
              _results.push(typeof _this.debug === "function" ? _this.debug("Unhandled frame: " + frame) : void 0);
          }
        }
        return _results;
      };
      this.ws.onclose = function() {
        var msg;
        msg = "Whoops! Lost connection to " + _this.ws.url;
        if (typeof _this.debug === "function") {
          _this.debug(msg);
        }
        return typeof errorCallback === "function" ? errorCallback(msg) : void 0;
      };
      return this.ws.onopen = function() {
        var headers;
        if (typeof _this.debug === "function") {
          _this.debug('Web Socket Opened...');
        }
        headers = {
          "accept-version": Stomp.VERSIONS.supportedVersions(),
          "heart-beat": [_this.heartbeat.outgoing, _this.heartbeat.incoming].join(',')
        };
        if (vhost) {
          headers.host = vhost;
        }
        if (login) {
          headers.login = login;
        }
        if (passcode) {
          headers.passcode = passcode;
        }
        return _this._transmit("CONNECT", headers);
      };
    };

    Client.prototype.disconnect = function(disconnectCallback) {
      this._transmit("DISCONNECT");
      this.ws.onclose = null;
      this._cleanUp();
      return typeof disconnectCallback === "function" ? disconnectCallback() : void 0;
    };

    Client.prototype._cleanUp = function() {
      this.ws.close();
      this.connected = false;
      if (this.pinger) {
        if (typeof window !== "undefined" && window !== null) {
          window.clearInterval(this.pinger);
        }
      }
      if (this.ponger) {
        return typeof window !== "undefined" && window !== null ? window.clearInterval(this.ponger) : void 0;
      }
    };

    Client.prototype.send = function(destination, headers, body) {
      if (headers == null) {
        headers = {};
      }
      if (body == null) {
        body = '';
      }
      headers.destination = destination;
      return this._transmit("SEND", headers, body);
    };

    Client.prototype.subscribe = function(destination, callback, headers) {
      if (headers == null) {
        headers = {};
      }
      if (!headers.id) {
        headers.id = "sub-" + this.counter++;
      }
      headers.destination = destination;
      this.subscriptions[headers.id] = callback;
      this._transmit("SUBSCRIBE", headers);
      return headers.id;
    };

    Client.prototype.unsubscribe = function(id) {
      delete this.subscriptions[id];
      return this._transmit("UNSUBSCRIBE", {
        id: id
      });
    };

    Client.prototype.begin = function(transaction) {
      return this._transmit("BEGIN", {
        transaction: transaction
      });
    };

    Client.prototype.commit = function(transaction) {
      return this._transmit("COMMIT", {
        transaction: transaction
      });
    };

    Client.prototype.abort = function(transaction) {
      return this._transmit("ABORT", {
        transaction: transaction
      });
    };

    Client.prototype.ack = function(messageID, subscription, headers) {
      if (headers == null) {
        headers = {};
      }
      headers["message-id"] = messageID;
      headers.subscription = subscription;
      return this._transmit("ACK", headers);
    };

    Client.prototype.nack = function(messageID, subscription, headers) {
      if (headers == null) {
        headers = {};
      }
      headers["message-id"] = messageID;
      headers.subscription = subscription;
      return this._transmit("NACK", headers);
    };

    return Client;

  })();

  Stomp = {
    libVersion: "2.0.0-next",
    VERSIONS: {
      V1_0: '1.0',
      V1_1: '1.1',
      V1_2: '1.2',
      supportedVersions: function() {
        return '1.1,1.0';
      }
    },
    client: function(url, protocols) {
      var klass, ws;
      if (protocols == null) {
        protocols = ['v10.stomp', 'v11.stomp'];
      }
      klass = Stomp.WebSocketClass || WebSocket;
      ws = new klass(url, protocols);
      return new Client(ws);
    },
    over: function(ws) {
      return new Client(ws);
    },
    Frame: Frame
  };

  if (typeof window !== "undefined" && window !== null) {
    window.Stomp = Stomp;
  } else {
    exports.Stomp = Stomp;
    Stomp.WebSocketClass = require('./test/server.mock.js').StompServerMock;
  }

}).call(this);

define("stomp", function(){});

/*
 * Jsonix is a JavaScript library which allows you to convert between XML
 * and JavaScript object structures.
 *
 * Copyright (c) 2010 - 2014, Alexey Valikov, Highsource.org
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Alexey Valikov nor the
 *       names of contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ALEXEY VALIKOV BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var Jsonix={singleFile:true};
if(typeof window==="undefined"){module.exports.Jsonix=Jsonix
};
Jsonix.Util={};
Jsonix.Util.extend=function(i,j){i=i||{};
if(j){for(var f in j){var g=j[f];
if(g!==undefined){i[f]=g
}}var h=typeof window!=="undefined"&&window!==null&&typeof window.Event=="function"&&j instanceof window.Event;
if(!h&&j.hasOwnProperty&&j.hasOwnProperty("toString")){i.toString=j.toString
}}return i
};
Jsonix.Class=function(){var k=function(){this.initialize.apply(this,arguments)
};
var m={};
var p=function(){};
var i,n,l;
for(var j=0,o=arguments.length;
j<o;
++j){l=arguments[j];
if(typeof l=="function"){if(j===0&&o>1){n=l.prototype.initialize;
l.prototype.initialize=p;
m=new l();
if(n===undefined){delete l.prototype.initialize
}else{l.prototype.initialize=n
}}i=l.prototype
}else{i=l
}Jsonix.Util.extend(m,i)
}k.prototype=m;
return k
};
Jsonix.XML={};
Jsonix.DOM={createDocument:function(){if(typeof window==="undefined"){return new (require("xmldom").DOMImplementation)().createDocument()
}else{if(typeof document!=="undefined"&&Jsonix.Util.Type.exists(document.implementation)&&Jsonix.Util.Type.isFunction(document.implementation.createDocument)){return document.implementation.createDocument("","",null)
}else{if(typeof ActiveXObject!=="undefined"){return new ActiveXObject("MSXML2.DOMDocument")
}else{throw new Error("Error created the DOM document.")
}}}},serialize:function(b){Jsonix.Util.Ensure.ensureExists(b);
if(typeof window==="undefined"){return(new (require("xmldom")).XMLSerializer()).serializeToString(b)
}else{if(Jsonix.Util.Type.exists(XMLSerializer)){return(new XMLSerializer()).serializeToString(b)
}else{if(Jsonix.Util.Type.exists(b.xml)){return b.xml
}else{throw new Error("Could not serialize the node, neither XMLSerializer nor the [xml] property were found.")
}}}},parse:function(e){Jsonix.Util.Ensure.ensureExists(e);
if(typeof window==="undefined"){return(new (require("xmldom")).DOMParser()).parseFromString(e,"application/xml")
}else{if(typeof DOMParser!="undefined"){return(new DOMParser()).parseFromString(e,"application/xml")
}else{if(typeof ActiveXObject!="undefined"){var f=Jsonix.DOM.createDocument("","");
f.loadXML(e);
return f
}else{var h="data:text/xml;charset=utf-8,"+encodeURIComponent(e);
var g=new XMLHttpRequest();
g.open("GET",h,false);
if(g.overrideMimeType){g.overrideMimeType("text/xml")
}g.send(null);
return g.responseXML
}}}},load:function(g,e,h){var f=Jsonix.Request.INSTANCE;
f.issue(g,function(a){var b;
if(Jsonix.Util.Type.exists(a.responseXML)&&Jsonix.Util.Type.exists(a.responseXML.documentElement)){b=a.responseXML
}else{if(Jsonix.Util.Type.isString(a.responseText)){b=Jsonix.DOM.parse(a.responseText)
}else{throw new Error("Response does not have valid [responseXML] or [responseText].")
}}e(b)
},function(a){throw new Error("Could not retrieve XML from URL ["+g+"].")
},h)
}};
Jsonix.Request=Jsonix.Class({factories:[function(){return new XMLHttpRequest()
},function(){return new ActiveXObject("Msxml2.XMLHTTP")
},function(){return new ActiveXObject("Msxml2.XMLHTTP.6.0")
},function(){return new ActiveXObject("Msxml2.XMLHTTP.3.0")
},function(){return new ActiveXObject("Microsoft.XMLHTTP")
},function(){if(typeof window==="undefined"){var b=require("xmlhttprequest").XMLHttpRequest;
return new b()
}else{return null
}}],initialize:function(){},issue:function(t,y,s,v){Jsonix.Util.Ensure.ensureString(t);
if(Jsonix.Util.Type.exists(y)){Jsonix.Util.Ensure.ensureFunction(y)
}else{y=function(){}
}if(Jsonix.Util.Type.exists(s)){Jsonix.Util.Ensure.ensureFunction(s)
}else{s=function(){}
}if(Jsonix.Util.Type.exists(v)){Jsonix.Util.Ensure.ensureObject(v)
}else{v={}
}var r=this.createTransport();
var u=Jsonix.Util.Type.isString(v.method)?v.method:"GET";
var q=Jsonix.Util.Type.isBoolean(v.async)?v.async:true;
var x=Jsonix.Util.Type.isString(v.proxy)?v.proxy:Jsonix.Request.PROXY;
var p=Jsonix.Util.Type.isString(v.user)?v.user:null;
var w=Jsonix.Util.Type.isString(v.password)?v.password:null;
if(Jsonix.Util.Type.isString(x)&&(t.indexOf("http")===0)){t=x+encodeURIComponent(t)
}if(Jsonix.Util.Type.isString(p)){r.open(u,t,q,p,w)
}else{r.open(u,t,q)
}if(Jsonix.Util.Type.isObject(v.headers)){for(var n in v.headers){if(v.headers.hasOwnProperty(n)){r.setRequestHeader(n,v.headers[n])
}}}var o=Jsonix.Util.Type.exists(v.data)?v.data:null;
if(!q){r.send(o);
this.handleTransport(r,y,s)
}else{var z=this;
if(typeof window!=="undefined"){r.onreadystatechange=function(){z.handleTransport(r,y,s)
};
window.setTimeout(function(){r.send(o)
},0)
}else{r.onreadystatechange=function(){z.handleTransport(r,y,s)
};
console.log("Sending.");
r.send(o)
}}return r
},handleTransport:function(e,f,d){if(e.readyState==4){if(!e.status||(e.status>=200&&e.status<300)){f(e)
}if(e.status&&(e.status<200||e.status>=300)){d(e)
}}},createTransport:function(){for(var h=0,g=this.factories.length;
h<g;
h++){try{var e=this.factories[h]();
if(e!==null){return e
}}catch(f){}}throw new Error("Could not create XML HTTP transport.")
},CLASS_NAME:"Jsonix.Request"});
Jsonix.Request.INSTANCE=new Jsonix.Request();
Jsonix.Request.PROXY=null;
Jsonix.Schema={};
Jsonix.Model={};
Jsonix.Util.Type={exists:function(b){return(typeof b!=="undefined"&&b!==null)
},isString:function(b){return typeof b==="string"
},isBoolean:function(b){return typeof b==="boolean"
},isObject:function(b){return typeof b==="object"
},isFunction:function(b){return typeof b==="function"
},isNumber:function(b){return(typeof b==="number")&&!isNaN(b)
},isNumberOrNaN:function(b){return(b===+b)||(Object.prototype.toString.call(b)==="[object Number]")
},isNaN:function(b){return Jsonix.Util.Type.isNumberOrNaN(b)&&isNaN(b)
},isArray:function(b){return !!(b&&b.concat&&b.unshift&&!b.callee)
},isDate:function(b){return !!(b&&b.getTimezoneOffset&&b.setUTCFullYear)
},isRegExp:function(b){return !!(b&&b.test&&b.exec&&(b.ignoreCase||b.ignoreCase===false))
},isEqual:function(B,b,s){var t=Jsonix.Util.Type.isFunction(s);
var r=function(k,m,h){var d=slice.call(arguments);
var c=d.length<=1;
var j=c?0:d[0];
var l=c?d[0]:d[1];
var f=d[2]||1;
var g=Math.max(Math.ceil((l-j)/f),0);
var i=0;
var e=new Array(g);
while(i<g){e[i++]=j;
j+=f
}return e
};
var q=Object.keys||function(d){if(Jsonix.Util.Type.isArray(d)){return r(0,d.length)
}var e=[];
for(var c in d){if(d.hasOwnProperty(c)){e[e.length]=c
}}return e
};
if(B===b){return true
}if(Jsonix.Util.Type.isNaN(B)&&Jsonix.Util.Type.isNaN(b)){return true
}var v=typeof B;
var y=typeof b;
if(v!=y){if(t){s("Types differ ["+v+"], ["+y+"].")
}return false
}if(B==b){return true
}if((!B&&b)||(B&&!b)){if(t){s("One is falsy, the other is truthy.")
}return false
}if(Jsonix.Util.Type.isDate(B)&&Jsonix.Util.Type.isDate(b)){return B.getTime()===b.getTime()
}if(Jsonix.Util.Type.isNaN(B)&&Jsonix.Util.Type.isNaN(b)){return false
}if(Jsonix.Util.Type.isRegExp(B)&&Jsonix.Util.Type.isRegExp(b)){return B.source===b.source&&B.global===b.global&&B.ignoreCase===b.ignoreCase&&B.multiline===b.multiline
}if(v!=="object"){return false
}if(B.length&&(B.length!==b.length)){if(t){s("Lengths differ.");
s("A.length="+B.length);
s("B.length="+b.length)
}return false
}var w=q(B);
var a=q(b);
if(w.length!=a.length){if(t){s("Different number of properties ["+w.length+"], ["+a.length+"].")
}for(var x=0;
x<w.length;
x++){if(t){s("A ["+w[x]+"]="+B[w[x]])
}}for(var z=0;
z<a.length;
z++){if(t){s("B ["+a[z]+"]="+b[a[z]])
}}return false
}for(var u=0;
u<w.length;
u++){var A=w[u];
if(!(A in b)||!Jsonix.Util.Type.isEqual(B[A],b[A],s)){if(t){s("One of the properties differ.");
s("Key: ["+A+"].");
s("Left: ["+B[A]+"].");
s("Right: ["+b[A]+"].")
}return false
}}return true
}};
Jsonix.Util.NumberUtils={isInteger:function(b){return Jsonix.Util.Type.isNumber(b)&&((b%1)===0)
}};
Jsonix.Util.StringUtils={trim:(!!String.prototype.trim)?function(b){Jsonix.Util.Ensure.ensureString(b);
return b.trim()
}:function(b){Jsonix.Util.Ensure.ensureString(b);
return b.replace(/^\s\s*/,"").replace(/\s\s*$/,"")
},isEmpty:function(f){var g=f.length;
if(!g){return true
}for(var h=0;
h<g;
h++){var c=f[h];
if(c===" "){}else{if(c>"\u000D"&&c<"\u0085"){return false
}else{if(c<"\u00A0"){if(c<"\u0009"){return false
}else{if(c>"\u0085"){return false
}}}else{if(c>"\u00A0"){if(c<"\u2028"){if(c<"\u180E"){if(c<"\u1680"){return false
}else{if(c>"\u1680"){return false
}}}else{if(c>"\u180E"){if(c<"\u2000"){return false
}else{if(c>"\u200A"){return false
}}}}}else{if(c>"\u2029"){if(c<"\u205F"){if(c<"\u202F"){return false
}else{if(c>"\u202F"){return false
}}}else{if(c>"\u205F"){if(c<"\u3000"){return false
}else{if(c>"\u3000"){return false
}}}}}}}}}}}return true
},isNotBlank:function(b){return Jsonix.Util.Type.isString(b)&&!Jsonix.Util.StringUtils.isEmpty(b)
},whitespaceCharacters:"\u0009\u000A\u000B\u000C\u000D \u0085\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u2028\u2029\u202F\u205F\u3000",whitespaceCharactersMap:{"\u0009":true,"\u000A":true,"\u000B":true,"\u000C":true,"\u000D":true," ":true,"\u0085":true,"\u00A0":true,"\u1680":true,"\u180E":true,"\u2000":true,"\u2001":true,"\u2002":true,"\u2003":true,"\u2004":true,"\u2005":true,"\u2006":true,"\u2007":true,"\u2008":true,"\u2009":true,"\u200A":true,"\u2028":true,"\u2029":true,"\u202F":true,"\u205F":true,"\u3000":true},splitBySeparatorChars:function(r,n){Jsonix.Util.Ensure.ensureString(r);
Jsonix.Util.Ensure.ensureString(n);
var t=r.length;
if(t===0){return[]
}if(n.length===1){return r.split(n)
}else{var s=[];
var m=1;
var v=0;
var o=0;
var u=false;
var i=false;
var q=-1;
var p=false;
while(v<t){if(n.indexOf(r.charAt(v))>=0){if(u||p){i=true;
if(m++==q){v=t;
i=false
}s.push(r.substring(o,v));
u=false
}o=++v;
continue
}i=false;
u=true;
v++
}if(u||(p&&i)){s.push(r.substring(o,v))
}return s
}}};
Jsonix.Util.Ensure={ensureBoolean:function(b){if(!Jsonix.Util.Type.isBoolean(b)){throw new Error("Argument ["+b+"] must be a boolean.")
}},ensureString:function(b){if(!Jsonix.Util.Type.isString(b)){throw new Error("Argument ["+b+"] must be a string.")
}},ensureNumber:function(b){if(!Jsonix.Util.Type.isNumber(b)){throw new Error("Argument ["+b+"] must be a number.")
}},ensureNumberOrNaN:function(b){if(!Jsonix.Util.Type.isNumberOrNaN(b)){throw new Error("Argument ["+b+"] must be a number or NaN.")
}},ensureInteger:function(b){if(!Jsonix.Util.Type.isNumber(b)){throw new Error("Argument must be an integer, but it is not a number.")
}else{if(!Jsonix.Util.NumberUtils.isInteger(b)){throw new Error("Argument ["+b+"] must be an integer.")
}}},ensureDate:function(b){if(!(b instanceof Date)){throw new Error("Argument ["+b+"] must be a date.")
}},ensureObject:function(b){if(!Jsonix.Util.Type.isObject(b)){throw new Error("Argument ["+b+"] must be an object.")
}},ensureArray:function(b){if(!Jsonix.Util.Type.isArray(b)){throw new Error("Argument ["+b+"] must be an array.")
}},ensureFunction:function(b){if(!Jsonix.Util.Type.isFunction(b)){throw new Error("Argument ["+b+"] must be a function.")
}},ensureExists:function(b){if(!Jsonix.Util.Type.exists(b)){throw new Error("Argument ["+b+"] does not exist.")
}}};
Jsonix.XML.QName=Jsonix.Class({key:null,namespaceURI:null,localPart:null,prefix:null,string:null,initialize:function(n,j,r){var q;
var o;
var m;
var k;
var l;
if(!Jsonix.Util.Type.exists(j)){q="";
o=n;
m=""
}else{if(!Jsonix.Util.Type.exists(r)){q=Jsonix.Util.Type.exists(n)?n:"";
o=j;
var p=j.indexOf(":");
if(p>0&&p<j.length){m=j.substring(0,p);
o=j.substring(p+1)
}else{m="";
o=j
}}else{q=Jsonix.Util.Type.exists(n)?n:"";
o=j;
m=Jsonix.Util.Type.exists(r)?r:""
}}this.namespaceURI=q;
this.localPart=o;
this.prefix=m;
this.key=(q!==""?("{"+q+"}"):"")+o;
this.string=(q!==""?("{"+q+"}"):"")+(m!==""?(m+":"):"")+o
},toString:function(){return this.string
},clone:function(){return new Jsonix.XML.QName(this.namespaceURI,this.localPart,this.prefix)
},equals:function(b){if(!b){return false
}else{return(this.namespaceURI==b.namespaceURI)&&(this.localPart==b.localPart)
}},CLASS_NAME:"Jsonix.XML.QName"});
Jsonix.XML.QName.fromString=function(p){var j=p.indexOf("{");
var l=p.lastIndexOf("}");
var m;
var k;
if((j===0)&&(l>0)&&(l<p.length)){m=p.substring(1,l);
k=p.substring(l+1)
}else{m="";
k=p
}var n=k.indexOf(":");
var i;
var o;
if(n>0&&n<k.length){i=k.substring(0,n);
o=k.substring(n+1)
}else{i="";
o=k
}return new Jsonix.XML.QName(m,o,i)
};
Jsonix.XML.QName.fromObject=function(f){Jsonix.Util.Ensure.ensureObject(f);
if(Jsonix.Util.Type.isString(f.CLASS_NAME)&&f.CLASS_NAME==="Jsonix.XML.QName"){return f
}Jsonix.Util.Ensure.ensureString(f.localPart);
var g=Jsonix.Util.Type.isString(f.namespaceURI)?f.namespaceURI:"";
var h=f.localPart;
var e=Jsonix.Util.Type.isString(f.prefix)?f.prefix:"";
return new Jsonix.XML.QName(g,h,e)
};
Jsonix.XML.QName.key=function(e,d){Jsonix.Util.Ensure.ensureString(d);
if(e){var f=d.indexOf(":");
if(f>0&&f<d.length){localName=d.substring(f+1)
}else{localName=d
}return"{"+e+"}"+localName
}else{return d
}};
Jsonix.XML.Calendar=Jsonix.Class({year:NaN,month:NaN,day:NaN,hour:NaN,minute:NaN,second:NaN,fractionalSecond:NaN,timezone:NaN,initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
if(Jsonix.Util.Type.exists(b.year)){Jsonix.Util.Ensure.ensureInteger(b.year);
if(b.year>=-9999&&b.year<=9999){this.year=b.year
}else{throw new Error("Invalid year ["+b.year+"].")
}}else{this.year=NaN
}if(Jsonix.Util.Type.exists(b.month)){Jsonix.Util.Ensure.ensureInteger(b.month);
if(b.month>=1&&b.month<=12){this.month=b.month
}else{throw new Error("Invalid month ["+b.month+"].")
}}else{this.month=NaN
}if(Jsonix.Util.Type.exists(b.day)){Jsonix.Util.Ensure.ensureInteger(b.day);
if(b.day>=1&&b.day<=31){this.day=b.day
}else{throw new Error("Invalid day ["+b.day+"].")
}}else{this.day=NaN
}if(Jsonix.Util.Type.exists(b.hour)){Jsonix.Util.Ensure.ensureInteger(b.hour);
if(b.hour>=0&&b.hour<=23){this.hour=b.hour
}else{throw new Error("Invalid hour ["+b.hour+"].")
}}else{this.hour=NaN
}if(Jsonix.Util.Type.exists(b.minute)){Jsonix.Util.Ensure.ensureInteger(b.minute);
if(b.minute>=0&&b.minute<=59){this.minute=b.minute
}else{throw new Error("Invalid minute ["+b.minute+"].")
}}else{this.minute=NaN
}if(Jsonix.Util.Type.exists(b.second)){Jsonix.Util.Ensure.ensureInteger(b.second);
if(b.second>=0&&b.second<=59){this.second=b.second
}else{throw new Error("Invalid second ["+b.second+"].")
}}else{this.second=NaN
}if(Jsonix.Util.Type.exists(b.fractionalSecond)){Jsonix.Util.Ensure.ensureNumber(b.fractionalSecond);
if(b.fractionalSecond>=0&&b.fractionalSecond<1){this.fractionalSecond=b.fractionalSecond
}else{throw new Error("Invalid fractional second ["+b.fractionalSecond+"].")
}}else{this.fractionalSecond=NaN
}if(Jsonix.Util.Type.exists(b.timezone)){if(Jsonix.Util.Type.isNaN(b.timezone)){this.timezone=NaN
}else{Jsonix.Util.Ensure.ensureInteger(b.timezone);
if(b.timezone>=-1440&&b.timezone<1440){this.timezone=b.timezone
}else{throw new Error("Invalid timezone ["+b.timezone+"].")
}}}else{this.timezone=NaN
}},CLASS_NAME:"Jsonix.XML.Calendar"});
Jsonix.XML.Calendar.fromObject=function(b){Jsonix.Util.Ensure.ensureObject(b);
if(Jsonix.Util.Type.isString(b.CLASS_NAME)&&b.CLASS_NAME==="Jsonix.XML.Calendar"){return b
}return new Jsonix.XML.Calendar(b)
};
Jsonix.XML.Input=Jsonix.Class({root:null,node:null,attributes:null,eventType:null,initialize:function(b){Jsonix.Util.Ensure.ensureExists(b);
this.root=b
},hasNext:function(){if(this.node===null){return true
}else{if(this.node===this.root){var b=this.node.nodeType;
if(b===9&&this.eventType===8){return false
}else{if(b===1&&this.eventType===2){return false
}else{return true
}}}else{return true
}}},next:function(){if(this.eventType===null){return this.enter(this.root)
}if(this.eventType===7){var f=this.node.documentElement;
if(f){return this.enter(f)
}else{return this.leave(this.node)
}}else{if(this.eventType===1){var e=this.node.firstChild;
if(e){return this.enter(e)
}else{return this.leave(this.node)
}}else{if(this.eventType===2){var d=this.node.nextSibling;
if(d){return this.enter(d)
}else{return this.leave(this.node)
}}else{return this.leave(this.node)
}}}},enter:function(e){var d=e.nodeType;
this.node=e;
this.attributes=null;
if(d===1){this.eventType=1;
return this.eventType
}else{if(d===2){this.eventType=10;
return this.eventType
}else{if(d===3){var f=e.nodeValue;
if(Jsonix.Util.StringUtils.isEmpty(f)){this.eventType=6
}else{this.eventType=4
}return this.eventType
}else{if(d===4){this.eventType=12;
return this.eventType
}else{if(d===5){this.eventType=9;
return this.eventType
}else{if(d===6){this.eventType=15;
return this.eventType
}else{if(d===7){this.eventType=3;
return this.eventType
}else{if(d===8){this.eventType=5;
return this.eventType
}else{if(d===9){this.eventType=7;
return this.eventType
}else{if(d===10){this.eventType=12;
return this.eventType
}else{if(d===12){this.eventType=14;
return this.eventType
}else{throw new Error("Node type ["+d+"] is not supported.")
}}}}}}}}}}}},leave:function(f){if(f.nodeType===9){if(this.eventType==8){throw new Error("Invalid state.")
}else{this.node=f;
this.attributes=null;
this.eventType=8;
return this.eventType
}}else{if(f.nodeType===1){if(this.eventType==2){var e=f.nextSibling;
if(e){return this.enter(e)
}}else{this.node=f;
this.attributes=null;
this.eventType=2;
return this.eventType
}}}var g=f.nextSibling;
if(g){return this.enter(g)
}else{var h=f.parentNode;
this.node=h;
this.attributes=null;
if(h.nodeType===9){this.eventType=8
}else{this.eventType=2
}return this.eventType
}},getName:function(){var b=this.node;
if(Jsonix.Util.Type.isString(b.nodeName)){if(Jsonix.Util.Type.isString(b.namespaceURI)){return new Jsonix.XML.QName(b.namespaceURI,b.nodeName)
}else{return new Jsonix.XML.QName(b.nodeName)
}}else{return null
}},getNameKey:function(){var b=this.node;
if(Jsonix.Util.Type.isString(b.nodeName)){return Jsonix.XML.QName.key(b.namespaceURI,b.nodeName)
}else{return null
}},getText:function(){return this.node.nodeValue
},nextTag:function(){var b=this.next();
while(b===7||b===4||b===12||b===6||b===3||b===5){b=this.next()
}if(b!==1&&b!==2){throw new Error("Expected start or end tag.")
}return b
},getElementText:function(){if(this.eventType!=1){throw new Error("Parser must be on START_ELEMENT to read next text.")
}var c=this.next();
var d="";
while(c!==2){if(c===4||c===12||c===6||c===9){d=d+this.getText()
}else{if(c===3||c===5){}else{if(c===8){throw new Error("Unexpected end of document when reading element text content.")
}else{if(c===1){throw new Error("Element text content may not contain START_ELEMENT.")
}else{throw new Error("Unexpected event type ["+c+"].")
}}}}c=this.next()
}return d
},getAttributeCount:function(){var b;
if(this.attributes){b=this.attributes
}else{if(this.eventType===1){b=this.node.attributes;
this.attributes=b
}else{if(this.eventType===10){b=this.node.parentNode.attributes;
this.attributes=b
}else{throw new Error("Number of attributes can only be retrieved for START_ELEMENT or ATTRIBUTE.")
}}}return b.length
},getAttributeName:function(f){var d;
if(this.attributes){d=this.attributes
}else{if(this.eventType===1){d=this.node.attributes;
this.attributes=d
}else{if(this.eventType===10){d=this.node.parentNode.attributes;
this.attributes=d
}else{throw new Error("Attribute name can only be retrieved for START_ELEMENT or ATTRIBUTE.")
}}}if(f<0||f>=d.length){throw new Error("Invalid attribute index ["+f+"].")
}var e=d[f];
if(Jsonix.Util.Type.isString(e.namespaceURI)){return new Jsonix.XML.QName(e.namespaceURI,e.nodeName)
}else{return new Jsonix.XML.QName(e.nodeName)
}},getAttributeNameKey:function(f){var d;
if(this.attributes){d=this.attributes
}else{if(this.eventType===1){d=this.node.attributes;
this.attributes=d
}else{if(this.eventType===10){d=this.node.parentNode.attributes;
this.attributes=d
}else{throw new Error("Attribute name key can only be retrieved for START_ELEMENT or ATTRIBUTE.")
}}}if(f<0||f>=d.length){throw new Error("Invalid attribute index ["+f+"].")
}var e=d[f];
return Jsonix.XML.QName.key(e.namespaceURI,e.nodeName)
},getAttributeValue:function(f){var d;
if(this.attributes){d=this.attributes
}else{if(this.eventType===1){d=this.node.attributes;
this.attributes=d
}else{if(this.eventType===10){d=this.node.parentNode.attributes;
this.attributes=d
}else{throw new Error("Attribute value can only be retrieved for START_ELEMENT or ATTRIBUTE.")
}}}if(f<0||f>=d.length){throw new Error("Invalid attribute index ["+f+"].")
}var e=d[f];
return e.nodeValue
},getElement:function(){if(this.eventType===1||this.eventType===2){this.eventType=2;
return this.node
}else{throw new Error("Parser must be on START_ELEMENT or END_ELEMENT to return current element.")
}},CLASS_NAME:"Jsonix.XML.Input"});
Jsonix.XML.Input.START_ELEMENT=1;
Jsonix.XML.Input.END_ELEMENT=2;
Jsonix.XML.Input.PROCESSING_INSTRUCTION=3;
Jsonix.XML.Input.CHARACTERS=4;
Jsonix.XML.Input.COMMENT=5;
Jsonix.XML.Input.SPACE=6;
Jsonix.XML.Input.START_DOCUMENT=7;
Jsonix.XML.Input.END_DOCUMENT=8;
Jsonix.XML.Input.ENTITY_REFERENCE=9;
Jsonix.XML.Input.ATTRIBUTE=10;
Jsonix.XML.Input.DTD=11;
Jsonix.XML.Input.CDATA=12;
Jsonix.XML.Input.NAMESPACE=13;
Jsonix.XML.Input.NOTATION_DECLARATION=14;
Jsonix.XML.Input.ENTITY_DECLARATION=15;
Jsonix.XML.Output=Jsonix.Class({document:null,node:null,nodes:null,xmldom:null,namespacePrefixes:null,namespacePrefixIndex:0,initialize:function(c){if(typeof ActiveXObject!=="undefined"){this.xmldom=new ActiveXObject("Microsoft.XMLDOM")
}else{this.xmldom=null
}this.nodes=[];
this.namespacePrefixes={"":""};
if(Jsonix.Util.Type.isObject(c)){if(Jsonix.Util.Type.isObject(c.namespacePrefixes)){for(var d in c.namespacePrefixes){if(c.namespacePrefixes.hasOwnProperty(d)){this.namespacePrefixes[d]=c.namespacePrefixes[d]
}}}}},destroy:function(){this.xmldom=null
},writeStartDocument:function(){var b=Jsonix.DOM.createDocument();
this.document=b;
return this.push(b)
},writeEndDocument:function(){return this.pop()
},writeStartElement:function(h){Jsonix.Util.Ensure.ensureObject(h);
Jsonix.Util.Ensure.ensureString(h.localPart);
var i=Jsonix.Util.Type.isString(h.namespaceURI)?h.namespaceURI:"";
var j=h.localPart;
var l=h.prefix||this.getPrefix(i);
var k=(!l?j:l+":"+j);
var g;
if(Jsonix.Util.Type.isFunction(this.document.createElementNS)){g=this.document.createElementNS(i,k)
}else{if(this.xmldom){g=this.xmldom.createNode(1,k,i)
}else{throw new Error("Could not create an element node.")
}}this.peek().appendChild(g);
return this.push(g)
},writeEndElement:function(){return this.pop()
},writeCharacters:function(c){var d;
if(Jsonix.Util.Type.isFunction(this.document.createTextNode)){d=this.document.createTextNode(c)
}else{if(this.xmldom){d=this.xmldom.createTextNode(c)
}else{throw new Error("Could not create a text node.")
}}this.peek().appendChild(d);
return d
},writeAttribute:function(m,i){Jsonix.Util.Ensure.ensureObject(m);
Jsonix.Util.Ensure.ensureString(m.localPart);
Jsonix.Util.Ensure.ensureString(i);
var n=Jsonix.Util.Type.isString(m.namespaceURI)?m.namespaceURI:"";
var o=m.localPart;
var j=m.prefix||this.getPrefix(n);
var p=(!j?o:j+":"+o);
var k=this.peek();
if(n===""){k.setAttribute(p,i)
}else{if(k.setAttributeNS){k.setAttributeNS(n,p,i)
}else{if(this.xmldom){var l=this.document.createNode(2,p,n);
l.nodeValue=i;
k.setAttributeNode(l)
}else{throw new Error("The [setAttributeNS] method is not implemented")
}}}},writeNode:function(c){var d;
if(Jsonix.Util.Type.exists(this.document.importNode)){d=this.document.importNode(c,true)
}else{d=c
}this.peek().appendChild(d);
return d
},push:function(b){this.nodes.push(b);
return b
},peek:function(){return this.nodes[this.nodes.length-1]
},pop:function(){var b=this.nodes.pop();
return b
},getPrefix:function(d){var c=this.namespacePrefixes[d];
if(Jsonix.Util.Type.exists(c)){return c
}else{c="p"+(this.namespacePrefixIndex++);
this.namespacePrefixes[d]=c;
return c
}},CLASS_NAME:"Jsonix.XML.Output"});
Jsonix.Model.TypeInfo=Jsonix.Class({name:null,initialize:function(){},CLASS_NAME:"Jsonix.Model.TypeInfo"});
Jsonix.Schema.XSD={};
Jsonix.Schema.XSD.NAMESPACE_URI="http://www.w3.org/2001/XMLSchema";
Jsonix.Schema.XSD.PREFIX="xsd";
Jsonix.Schema.XSD.qname=function(b){Jsonix.Util.Ensure.ensureString(b);
return new Jsonix.XML.QName(Jsonix.Schema.XSD.NAMESPACE_URI,b,Jsonix.Schema.XSD.PREFIX)
};
Jsonix.Schema.XSD.AnyType=Jsonix.Class(Jsonix.Model.TypeInfo,{name:"AnyType",typeName:Jsonix.Schema.XSD.qname("anyType"),initialize:function(){Jsonix.Model.TypeInfo.prototype.initialize.apply(this,[])
},isInstance:function(b){throw new Error("Abstract method [isInstance].")
},CLASS_NAME:"Jsonix.Schema.XSD.AnyType"});
Jsonix.Schema.XSD.AnyType.INSTANCE=new Jsonix.Schema.XSD.AnyType();
Jsonix.Schema.XSD.AnySimpleType=Jsonix.Class(Jsonix.Schema.XSD.AnyType,{name:"AnySimpleType",typeName:Jsonix.Schema.XSD.qname("anySimpleType"),simpleType:true,print:function(b){throw new Error("Abstract method [print].")
},parse:function(b){throw new Error("Abstract method [parse].")
},unmarshal:function(f,d){var e=d.getElementText();
if(Jsonix.Util.StringUtils.isNotBlank(e)){return this.parse(e)
}else{return null
}},marshal:function(f,e,d){if(Jsonix.Util.Type.exists(e)){d.writeCharacters(this.print(e))
}},build:function(c,d){},CLASS_NAME:"Jsonix.Schema.XSD.AnySimpleType"});
Jsonix.Schema.XSD.List=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:null,typeName:null,typeInfo:null,separator:" ",trimmedSeparator:Jsonix.Util.StringUtils.whitespaceCharacters,simpleType:true,built:false,initialize:function(g,h,f){Jsonix.Util.Ensure.ensureExists(g);
this.typeInfo=g;
if(!Jsonix.Util.Type.exists(this.name)){this.name=g.name+"*"
}if(Jsonix.Util.Type.exists(h)){this.typeName=h
}if(Jsonix.Util.Type.isString(f)){this.separator=f
}else{this.separator=" "
}var e=Jsonix.Util.StringUtils.trim(this.separator);
if(e.length===0){this.trimmedSeparator=Jsonix.Util.StringUtils.whitespaceCharacters
}else{this.trimmedSeparator=e
}},build:function(c,d){if(!this.built){this.typeInfo=c.resolveTypeInfo(this.typeInfo,d);
this.built=true
}},print:function(e){if(!Jsonix.Util.Type.exists(e)){return null
}Jsonix.Util.Ensure.ensureArray(e);
var d="";
for(var f=0;
f<e.length;
f++){if(f>0){d=d+this.separator
}d=d+this.typeInfo.print(e[f])
}return d
},parse:function(e){Jsonix.Util.Ensure.ensureString(e);
var g=Jsonix.Util.StringUtils.splitBySeparatorChars(e,this.trimmedSeparator);
var h=[];
for(var f=0;
f<g.length;
f++){h.push(this.typeInfo.parse(Jsonix.Util.StringUtils.trim(g[f])))
}return h
},CLASS_NAME:"Jsonix.Schema.XSD.List"});
Jsonix.Schema.XSD.String=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"String",typeName:Jsonix.Schema.XSD.qname("string"),print:function(b){Jsonix.Util.Ensure.ensureString(b);
return b
},parse:function(b){Jsonix.Util.Ensure.ensureString(b);
return b
},isInstance:function(b){return Jsonix.Util.Type.isString(b)
},CLASS_NAME:"Jsonix.Schema.XSD.String"});
Jsonix.Schema.XSD.String.INSTANCE=new Jsonix.Schema.XSD.String();
Jsonix.Schema.XSD.String.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.String.INSTANCE);
Jsonix.Schema.XSD.Strings=Jsonix.Class(Jsonix.Schema.XSD.List,{name:"Strings",initialize:function(){Jsonix.Schema.XSD.List.prototype.initialize.apply(this,[Jsonix.Schema.XSD.String.INSTANCE,Jsonix.Schema.XSD.qname("strings")," "])
},CLASS_NAME:"Jsonix.Schema.XSD.Strings"});
Jsonix.Schema.XSD.Strings.INSTANCE=new Jsonix.Schema.XSD.Strings();
Jsonix.Schema.XSD.NormalizedString=Jsonix.Class(Jsonix.Schema.XSD.String,{name:"NormalizedString",typeName:Jsonix.Schema.XSD.qname("normalizedString"),CLASS_NAME:"Jsonix.Schema.XSD.NormalizedString"});
Jsonix.Schema.XSD.NormalizedString.INSTANCE=new Jsonix.Schema.XSD.NormalizedString();
Jsonix.Schema.XSD.NormalizedString.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.NormalizedString.INSTANCE);
Jsonix.Schema.XSD.Token=Jsonix.Class(Jsonix.Schema.XSD.NormalizedString,{name:"Token",typeName:Jsonix.Schema.XSD.qname("token"),CLASS_NAME:"Jsonix.Schema.XSD.Token"});
Jsonix.Schema.XSD.Token.INSTANCE=new Jsonix.Schema.XSD.Token();
Jsonix.Schema.XSD.Token.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Token.INSTANCE);
Jsonix.Schema.XSD.Language=Jsonix.Class(Jsonix.Schema.XSD.Token,{name:"Language",typeName:Jsonix.Schema.XSD.qname("language"),CLASS_NAME:"Jsonix.Schema.XSD.Language"});
Jsonix.Schema.XSD.Language.INSTANCE=new Jsonix.Schema.XSD.Language();
Jsonix.Schema.XSD.Language.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Language.INSTANCE);
Jsonix.Schema.XSD.Name=Jsonix.Class(Jsonix.Schema.XSD.Token,{name:"Name",typeName:Jsonix.Schema.XSD.qname("Name"),CLASS_NAME:"Jsonix.Schema.XSD.Name"});
Jsonix.Schema.XSD.Name.INSTANCE=new Jsonix.Schema.XSD.Name();
Jsonix.Schema.XSD.Name.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Name.INSTANCE);
Jsonix.Schema.XSD.NCName=Jsonix.Class(Jsonix.Schema.XSD.Name,{name:"NCName",typeName:Jsonix.Schema.XSD.qname("NCName"),CLASS_NAME:"Jsonix.Schema.XSD.NCName"});
Jsonix.Schema.XSD.NCName.INSTANCE=new Jsonix.Schema.XSD.NCName();
Jsonix.Schema.XSD.NCName.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.NCName.INSTANCE);
Jsonix.Schema.XSD.NMToken=Jsonix.Class(Jsonix.Schema.XSD.Token,{name:"NMToken",typeName:Jsonix.Schema.XSD.qname("NMTOKEN"),CLASS_NAME:"Jsonix.Schema.XSD.NMToken"});
Jsonix.Schema.XSD.NMToken.INSTANCE=new Jsonix.Schema.XSD.NMToken();
Jsonix.Schema.XSD.NMTokens=Jsonix.Class(Jsonix.Schema.XSD.List,{name:"NMTokens",initialize:function(){Jsonix.Schema.XSD.List.prototype.initialize.apply(this,[Jsonix.Schema.XSD.NMToken.INSTANCE,Jsonix.Schema.XSD.qname("NMTOKEN")," "])
},CLASS_NAME:"Jsonix.Schema.XSD.NMTokens"});
Jsonix.Schema.XSD.NMTokens.INSTANCE=new Jsonix.Schema.XSD.NMTokens();
Jsonix.Schema.XSD.Boolean=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"Boolean",typeName:Jsonix.Schema.XSD.qname("boolean"),print:function(b){Jsonix.Util.Ensure.ensureBoolean(b);
return b?"true":"false"
},parse:function(b){Jsonix.Util.Ensure.ensureString(b);
if(b==="true"||b==="1"){return true
}else{if(b==="false"||b==="0"){return false
}else{throw new Error("Either [true], [1], [0] or [false] expected as boolean value.")
}}},isInstance:function(b){return Jsonix.Util.Type.isBoolean(b)
},CLASS_NAME:"Jsonix.Schema.XSD.Boolean"});
Jsonix.Schema.XSD.Boolean.INSTANCE=new Jsonix.Schema.XSD.Boolean();
Jsonix.Schema.XSD.Boolean.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Boolean.INSTANCE);
Jsonix.Schema.XSD.Base64Binary=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"Base64Binary",typeName:Jsonix.Schema.XSD.qname("base64Binary"),charToByte:{},byteToChar:[],initialize:function(){Jsonix.Schema.XSD.AnySimpleType.prototype.initialize.apply(this);
var h="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
for(var f=0;
f<h.length;
f++){var g=h.charAt(f);
var e=h.charCodeAt(f);
this.byteToChar[f]=g;
this.charToByte[g]=f
}},print:function(b){Jsonix.Util.Ensure.ensureArray(b);
return this.encode(b)
},parse:function(b){Jsonix.Util.Ensure.ensureString(b);
return this.decode(b)
},encode:function(i){var q="";
var s;
var t;
var u;
var v;
var w;
var x;
var j;
var o=0;
var p=0;
var r=i.length;
for(o=0;
o<r;
o+=3){s=i[o]&255;
v=this.byteToChar[s>>2];
if(o+1<r){t=i[o+1]&255;
w=this.byteToChar[((s&3)<<4)|(t>>4)];
if(o+2<r){u=i[o+2]&255;
x=this.byteToChar[((t&15)<<2)|(u>>6)];
j=this.byteToChar[u&63]
}else{x=this.byteToChar[(t&15)<<2];
j="="
}}else{w=this.byteToChar[(s&3)<<4];
x="=";
j="="
}q=q+v+w+x+j
}return q
},decode:function(t){input=t.replace(/[^A-Za-z0-9\+\/\=]/g,"");
var r=(input.length/4)*3;
if(input.charAt(input.length-1)==="="){r--
}if(input.charAt(input.length-2)==="="){r--
}var j=new Array(r);
var s;
var u;
var v;
var w;
var x;
var i;
var o;
var p=0;
var q=0;
for(p=0;
p<r;
p+=3){w=this.charToByte[input.charAt(q++)];
x=this.charToByte[input.charAt(q++)];
i=this.charToByte[input.charAt(q++)];
o=this.charToByte[input.charAt(q++)];
s=(w<<2)|(x>>4);
u=((x&15)<<4)|(i>>2);
v=((i&3)<<6)|o;
j[p]=s;
if(i!=64){j[p+1]=u
}if(o!=64){j[p+2]=v
}}return j
},isInstance:function(b){return Jsonix.Util.Type.isArray(b)
},CLASS_NAME:"Jsonix.Schema.XSD.Base64Binary"});
Jsonix.Schema.XSD.Base64Binary.INSTANCE=new Jsonix.Schema.XSD.Base64Binary();
Jsonix.Schema.XSD.Base64Binary.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Base64Binary.INSTANCE);
Jsonix.Schema.XSD.HexBinary=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"HexBinary",typeName:Jsonix.Schema.XSD.qname("hexBinary"),charToQuartet:{},byteToDuplet:[],initialize:function(){Jsonix.Schema.XSD.AnySimpleType.prototype.initialize.apply(this);
var f="0123456789ABCDEF";
var e=f.toLowerCase();
var d;
for(d=0;
d<16;
d++){this.charToQuartet[f.charAt(d)]=d;
if(d>=10){this.charToQuartet[e.charAt(d)]=d
}}for(d=0;
d<256;
d++){this.byteToDuplet[d]=f[d>>4]+f[d&15]
}},print:function(b){Jsonix.Util.Ensure.ensureArray(b);
return this.encode(b)
},parse:function(b){Jsonix.Util.Ensure.ensureString(b);
return this.decode(b)
},encode:function(e){var d="";
for(var f=0;
f<e.length;
f++){d=d+this.byteToDuplet[e[f]&255]
}return d
},decode:function(m){var l=m.replace(/[^A-Fa-f0-9]/g,"");
var h=l.length>>1;
var j=new Array(h);
for(var k=0;
k<h;
k++){var n=l.charAt(2*k);
var i=l.charAt(2*k+1);
j[k]=this.charToQuartet[n]<<4|this.charToQuartet[i]
}return j
},isInstance:function(b){return Jsonix.Util.Type.isArray(b)
},CLASS_NAME:"Jsonix.Schema.XSD.HexBinary"});
Jsonix.Schema.XSD.HexBinary.INSTANCE=new Jsonix.Schema.XSD.HexBinary();
Jsonix.Schema.XSD.HexBinary.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.HexBinary.INSTANCE);
Jsonix.Schema.XSD.Number=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"Number",typeName:Jsonix.Schema.XSD.qname("number"),print:function(d){Jsonix.Util.Ensure.ensureNumberOrNaN(d);
if(Jsonix.Util.Type.isNaN(d)){return"NaN"
}else{if(d===Infinity){return"INF"
}else{if(d===-Infinity){return"-INF"
}else{var c=String(d);
return c
}}}},parse:function(c){Jsonix.Util.Ensure.ensureString(c);
if(c==="-INF"){return -Infinity
}else{if(c==="INF"){return Infinity
}else{if(c==="NaN"){return NaN
}else{var d=Number(c);
Jsonix.Util.Ensure.ensureNumber(d);
return d
}}}},isInstance:function(b){return Jsonix.Util.Type.isNumberOrNaN(b)
},CLASS_NAME:"Jsonix.Schema.XSD.Number"});
Jsonix.Schema.XSD.Number.INSTANCE=new Jsonix.Schema.XSD.Number();
Jsonix.Schema.XSD.Number.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Number.INSTANCE);
Jsonix.Schema.XSD.Float=Jsonix.Class(Jsonix.Schema.XSD.Number,{name:"Float",typeName:Jsonix.Schema.XSD.qname("float"),isInstance:function(b){return Jsonix.Util.Type.isNaN(b)||b===-Infinity||b===Infinity||(Jsonix.Util.Type.isNumber(b)&&b>=this.MIN_VALUE&&b<=this.MAX_VALUE)
},MIN_VALUE:-3.4028235e+38,MAX_VALUE:3.4028235e+38,CLASS_NAME:"Jsonix.Schema.XSD.Float"});
Jsonix.Schema.XSD.Float.INSTANCE=new Jsonix.Schema.XSD.Float();
Jsonix.Schema.XSD.Float.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Float.INSTANCE);
Jsonix.Schema.XSD.Decimal=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"Decimal",typeName:Jsonix.Schema.XSD.qname("decimal"),print:function(d){Jsonix.Util.Ensure.ensureNumber(d);
var c=String(d);
return c
},parse:function(c){Jsonix.Util.Ensure.ensureString(c);
var d=Number(c);
Jsonix.Util.Ensure.ensureNumber(d);
return d
},isInstance:function(b){return Jsonix.Util.Type.isNumber(b)
},CLASS_NAME:"Jsonix.Schema.XSD.Decimal"});
Jsonix.Schema.XSD.Decimal.INSTANCE=new Jsonix.Schema.XSD.Decimal();
Jsonix.Schema.XSD.Decimal.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Decimal.INSTANCE);
Jsonix.Schema.XSD.Integer=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"Integer",typeName:Jsonix.Schema.XSD.qname("integer"),print:function(d){Jsonix.Util.Ensure.ensureInteger(d);
var c=String(d);
return c
},parse:function(c){Jsonix.Util.Ensure.ensureString(c);
var d=Number(c);
Jsonix.Util.Ensure.ensureInteger(d);
return d
},isInstance:function(b){return Jsonix.Util.NumberUtils.isInteger(b)&&b>=this.MIN_VALUE&&b<=this.MAX_VALUE
},MIN_VALUE:-9223372036854776000,MAX_VALUE:9223372036854776000,CLASS_NAME:"Jsonix.Schema.XSD.Integer"});
Jsonix.Schema.XSD.Integer.INSTANCE=new Jsonix.Schema.XSD.Integer();
Jsonix.Schema.XSD.Integer.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Integer.INSTANCE);
Jsonix.Schema.XSD.NonPositiveInteger=Jsonix.Class(Jsonix.Schema.XSD.Integer,{name:"NonPositiveInteger",typeName:Jsonix.Schema.XSD.qname("nonPositiveInteger"),MIN_VALUE:-9223372036854776000,MAX_VALUE:0,CLASS_NAME:"Jsonix.Schema.XSD.NonPositiveInteger"});
Jsonix.Schema.XSD.NonPositiveInteger.INSTANCE=new Jsonix.Schema.XSD.NonPositiveInteger();
Jsonix.Schema.XSD.NonPositiveInteger.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.NonPositiveInteger.INSTANCE);
Jsonix.Schema.XSD.NegativeInteger=Jsonix.Class(Jsonix.Schema.XSD.NonPositiveInteger,{name:"NegativeInteger",typeName:Jsonix.Schema.XSD.qname("negativeInteger"),MIN_VALUE:-9223372036854776000,MAX_VALUE:-1,CLASS_NAME:"Jsonix.Schema.XSD.NegativeInteger"});
Jsonix.Schema.XSD.NegativeInteger.INSTANCE=new Jsonix.Schema.XSD.NegativeInteger();
Jsonix.Schema.XSD.NegativeInteger.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.NegativeInteger.INSTANCE);
Jsonix.Schema.XSD.Long=Jsonix.Class(Jsonix.Schema.XSD.Integer,{name:"Long",typeName:Jsonix.Schema.XSD.qname("long"),MIN_VALUE:-9223372036854776000,MAX_VALUE:9223372036854776000,CLASS_NAME:"Jsonix.Schema.XSD.Long"});
Jsonix.Schema.XSD.Long.INSTANCE=new Jsonix.Schema.XSD.Long();
Jsonix.Schema.XSD.Long.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Long.INSTANCE);
Jsonix.Schema.XSD.Int=Jsonix.Class(Jsonix.Schema.XSD.Long,{name:"Int",typeName:Jsonix.Schema.XSD.qname("int"),MIN_VALUE:-2147483648,MAX_VALUE:2147483647,CLASS_NAME:"Jsonix.Schema.XSD.Int"});
Jsonix.Schema.XSD.Int.INSTANCE=new Jsonix.Schema.XSD.Int();
Jsonix.Schema.XSD.Int.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Int.INSTANCE);
Jsonix.Schema.XSD.Short=Jsonix.Class(Jsonix.Schema.XSD.Int,{name:"Short",typeName:Jsonix.Schema.XSD.qname("short"),MIN_VALUE:-32768,MAX_VALUE:32767,CLASS_NAME:"Jsonix.Schema.XSD.Short"});
Jsonix.Schema.XSD.Short.INSTANCE=new Jsonix.Schema.XSD.Short();
Jsonix.Schema.XSD.Short.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Short.INSTANCE);
Jsonix.Schema.XSD.Byte=Jsonix.Class(Jsonix.Schema.XSD.Short,{name:"Byte",typeName:Jsonix.Schema.XSD.qname("byte"),MIN_VALUE:-128,MAX_VALUE:127,CLASS_NAME:"Jsonix.Schema.XSD.Byte"});
Jsonix.Schema.XSD.Byte.INSTANCE=new Jsonix.Schema.XSD.Byte();
Jsonix.Schema.XSD.Byte.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Byte.INSTANCE);
Jsonix.Schema.XSD.NonNegativeInteger=Jsonix.Class(Jsonix.Schema.XSD.Integer,{name:"NonNegativeInteger",typeName:Jsonix.Schema.XSD.qname("nonNegativeInteger"),MIN_VALUE:0,MAX_VALUE:9223372036854776000,CLASS_NAME:"Jsonix.Schema.XSD.NonNegativeInteger"});
Jsonix.Schema.XSD.NonNegativeInteger.INSTANCE=new Jsonix.Schema.XSD.NonNegativeInteger();
Jsonix.Schema.XSD.NonNegativeInteger.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.NonNegativeInteger.INSTANCE);
Jsonix.Schema.XSD.UnsignedLong=Jsonix.Class(Jsonix.Schema.XSD.NonNegativeInteger,{name:"UnsignedLong",typeName:Jsonix.Schema.XSD.qname("unsignedLong"),MIN_VALUE:0,MAX_VALUE:18446744073709552000,CLASS_NAME:"Jsonix.Schema.XSD.UnsignedLong"});
Jsonix.Schema.XSD.UnsignedLong.INSTANCE=new Jsonix.Schema.XSD.UnsignedLong();
Jsonix.Schema.XSD.UnsignedLong.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.UnsignedLong.INSTANCE);
Jsonix.Schema.XSD.UnsignedInt=Jsonix.Class(Jsonix.Schema.XSD.UnsignedLong,{name:"UnsignedInt",typeName:Jsonix.Schema.XSD.qname("unsignedInt"),MIN_VALUE:0,MAX_VALUE:4294967295,CLASS_NAME:"Jsonix.Schema.XSD.UnsignedInt"});
Jsonix.Schema.XSD.UnsignedInt.INSTANCE=new Jsonix.Schema.XSD.UnsignedInt();
Jsonix.Schema.XSD.UnsignedInt.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.UnsignedInt.INSTANCE);
Jsonix.Schema.XSD.UnsignedShort=Jsonix.Class(Jsonix.Schema.XSD.UnsignedInt,{name:"UnsignedShort",typeName:Jsonix.Schema.XSD.qname("unsignedShort"),MIN_VALUE:0,MAX_VALUE:65535,CLASS_NAME:"Jsonix.Schema.XSD.UnsignedShort"});
Jsonix.Schema.XSD.UnsignedShort.INSTANCE=new Jsonix.Schema.XSD.UnsignedShort();
Jsonix.Schema.XSD.UnsignedShort.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.UnsignedShort.INSTANCE);
Jsonix.Schema.XSD.UnsignedByte=Jsonix.Class(Jsonix.Schema.XSD.UnsignedShort,{name:"UnsignedByte",typeName:Jsonix.Schema.XSD.qname("unsignedByte"),MIN_VALUE:0,MAX_VALUE:255,CLASS_NAME:"Jsonix.Schema.XSD.UnsignedByte"});
Jsonix.Schema.XSD.UnsignedByte.INSTANCE=new Jsonix.Schema.XSD.UnsignedByte();
Jsonix.Schema.XSD.UnsignedByte.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.UnsignedByte.INSTANCE);
Jsonix.Schema.XSD.PositiveInteger=Jsonix.Class(Jsonix.Schema.XSD.NonNegativeInteger,{name:"PositiveInteger",typeName:Jsonix.Schema.XSD.qname("positiveInteger"),MIN_VALUE:1,MAX_VALUE:9223372036854776000,CLASS_NAME:"Jsonix.Schema.XSD.PositiveInteger"});
Jsonix.Schema.XSD.PositiveInteger.INSTANCE=new Jsonix.Schema.XSD.PositiveInteger();
Jsonix.Schema.XSD.PositiveInteger.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.PositiveInteger.INSTANCE);
Jsonix.Schema.XSD.Double=Jsonix.Class(Jsonix.Schema.XSD.Number,{name:"Double",typeName:Jsonix.Schema.XSD.qname("double"),isInstance:function(b){return Jsonix.Util.Type.isNaN(b)||b===-Infinity||b===Infinity||(Jsonix.Util.Type.isNumber(b)&&b>=this.MIN_VALUE&&b<=this.MAX_VALUE)
},MIN_VALUE:-1.7976931348623157e+308,MAX_VALUE:1.7976931348623157e+308,CLASS_NAME:"Jsonix.Schema.XSD.Double"});
Jsonix.Schema.XSD.Double.INSTANCE=new Jsonix.Schema.XSD.Double();
Jsonix.Schema.XSD.Double.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Double.INSTANCE);
Jsonix.Schema.XSD.AnyURI=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"AnyURI",typeName:Jsonix.Schema.XSD.qname("anyURI"),print:function(b){Jsonix.Util.Ensure.ensureString(b);
return b
},parse:function(b){Jsonix.Util.Ensure.ensureString(b);
return b
},isInstance:function(b){return Jsonix.Util.Type.isString(b)
},CLASS_NAME:"Jsonix.Schema.XSD.AnyURI"});
Jsonix.Schema.XSD.AnyURI.INSTANCE=new Jsonix.Schema.XSD.AnyURI();
Jsonix.Schema.XSD.AnyURI.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.AnyURI.INSTANCE);
Jsonix.Schema.XSD.QName=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"QName",typeName:Jsonix.Schema.XSD.qname("QName"),CLASS_NAME:"Jsonix.Schema.XSD.QName"});
Jsonix.Schema.XSD.QName.INSTANCE=new Jsonix.Schema.XSD.QName();
Jsonix.Schema.XSD.QName.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.QName.INSTANCE);
Jsonix.Schema.XSD.Calendar=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"Calendar",typeName:Jsonix.Schema.XSD.qname("calendar"),parse:function(j){Jsonix.Util.Ensure.ensureString(j);
var g=(j.charAt(0)==="-");
var h=g?-1:1;
var f=g?j.substring(1):j;
var i;
if(f.length>=19&&f.charAt(4)==="-"&&f.charAt(7)==="-"&&f.charAt(10)==="T"&&f.charAt(13)===":"&&f.charAt(16)===":"){return this.parseDateTime(j)
}else{if(f.length>=10&&f.charAt(4)==="-"&&f.charAt(7)==="-"){return this.parseDate(j)
}else{if(f.length>=8&&f.charAt(2)===":"&&f.charAt(5)===":"){return this.parseTime(j)
}else{throw new Error("Value ["+j+"] does not match dateTime, date or time patterns.")
}}}},parseDateTime:function(y){Jsonix.Util.Ensure.ensureString(y);
var t=(y.charAt(0)==="-");
var z=t?-1:1;
var s=t?y.substring(1):y;
if(s.length<19||s.charAt(4)!=="-"||s.charAt(7)!=="-"||s.charAt(10)!=="T"||s.charAt(13)!==":"||s.charAt(16)!==":"){throw new Error("Date time string ["+s+"] must be a string in format ['-'? yyyy '-' mm '-' dd 'T' hh ':' mm ':' ss ('.' s+)? (zzzzzz)?].")
}var u;
var x=s.indexOf("+",19);
if(x>=0){u=x
}else{var r=s.indexOf("-",19);
if(r>=0){u=r
}else{var p=s.indexOf("Z",19);
if(p>=0){u=p
}else{u=s.length
}}}var A=u>0&&u<s.length;
var C=s.substring(0,10);
var D=A?s.substring(11,u):s.substring(11);
var B=A?s.substring(u):"";
var v=this.parseDateString(C);
var w=this.parseTimeString(D);
var q=this.parseTimeZoneString(B);
return Jsonix.XML.Calendar.fromObject({year:z*v.year,month:v.month,day:v.day,hour:w.hour,minute:w.minute,second:w.second,fractionalSecond:w.fractionalSecond,timezone:q})
},parseDate:function(v){Jsonix.Util.Ensure.ensureString(v);
var p=(v.charAt(0)==="-");
var t=p?-1:1;
var z=p?v.substring(1):v;
var q;
var s=z.indexOf("+",10);
if(s>=0){q=s
}else{var o=z.indexOf("-",10);
if(o>=0){q=o
}else{var y=z.indexOf("Z",10);
if(y>=0){q=y
}else{q=z.length
}}}var u=q>0&&q<z.length;
var x=u?z.substring(0,q):z;
var r=this.parseDateString(x);
var w=u?v.substring(q):"";
var n=this.parseTimeZoneString(w);
return Jsonix.XML.Calendar.fromObject({year:t*r.year,month:r.month,day:r.day,timezone:n})
},parseTime:function(m){Jsonix.Util.Ensure.ensureString(m);
var r;
var t=m.indexOf("+",7);
if(t>=0){r=t
}else{var q=m.indexOf("-",7);
if(q>=0){r=q
}else{var o=m.indexOf("Z",7);
if(o>=0){r=o
}else{r=m.length
}}}var k=r>0&&r<m.length;
var l=k?m.substring(0,r):m;
var s=this.parseTimeString(l);
var n=k?m.substring(r):"";
var p=this.parseTimeZoneString(n);
return Jsonix.XML.Calendar.fromObject({hour:s.hour,minute:s.minute,second:s.second,fractionalSecond:s.fractionalSecond,timezone:p})
},parseDateString:function(e){Jsonix.Util.Ensure.ensureString(e);
if(e.length!==10){throw new Error("Date string ["+e+"] must be 10 characters long.")
}if(e.charAt(4)!=="-"||e.charAt(7)!=="-"){throw new Error("Date string ["+e+"] must be a string in format [yyyy '-' mm '-' ss ].")
}var g=this.parseYear(e.substring(0,4));
var f=this.parseMonth(e.substring(5,7));
var h=this.parseDay(e.substring(8,10));
return{year:g,month:f,day:h}
},parseTimeString:function(r){Jsonix.Util.Ensure.ensureString(r);
if(r.length<8||r.charAt(2)!==":"||r.charAt(5)!==":"){throw new Error("Time string ["+r+"] must be a string in format [hh ':' mm ':' ss ('.' s+)?].")
}var n=r.substring(0,2);
var k=r.substring(3,5);
var p=r.substring(6,8);
var j=r.length>=9?r.substring(8):"";
var m=this.parseHour(n);
var o=this.parseHour(k);
var q=this.parseSecond(p);
var l=this.parseFractionalSecond(j);
return{hour:m,minute:o,second:q,fractionalSecond:l}
},parseTimeZoneString:function(f){Jsonix.Util.Ensure.ensureString(f);
if(f===""){return NaN
}else{if(f==="Z"){return 0
}else{if(f.length!==6){throw new Error("Time zone must be an empty string, 'Z' or a string in format [('+' | '-') hh ':' mm].")
}var j=f.charAt(0);
var h;
if(j==="+"){h=1
}else{if(j==="-"){h=-1
}else{throw new Error("First character of the time zone ["+f+"] must be '+' or '-'.")
}}var i=this.parseHour(f.substring(1,3));
var g=this.parseMinute(f.substring(4,6));
return h*(i*60+g)
}}},parseYear:function(c){Jsonix.Util.Ensure.ensureString(c);
if(c.length!==4){throw new Error("Year ["+c+"] must be a four-digit number.")
}var d=Number(c);
Jsonix.Util.Ensure.ensureInteger(d);
return d
},parseMonth:function(c){Jsonix.Util.Ensure.ensureString(c);
if(c.length!==2){throw new Error("Month ["+c+"] must be a two-digit number.")
}var d=Number(c);
Jsonix.Util.Ensure.ensureInteger(d);
return d
},parseDay:function(c){Jsonix.Util.Ensure.ensureString(c);
if(c.length!==2){throw new Error("Day ["+c+"] must be a two-digit number.")
}var d=Number(c);
Jsonix.Util.Ensure.ensureInteger(d);
return d
},parseHour:function(c){Jsonix.Util.Ensure.ensureString(c);
if(c.length!==2){throw new Error("Hour ["+c+"] must be a two-digit number.")
}var d=Number(c);
Jsonix.Util.Ensure.ensureInteger(d);
return d
},parseMinute:function(c){Jsonix.Util.Ensure.ensureString(c);
if(c.length!==2){throw new Error("Minute ["+c+"] must be a two-digit number.")
}var d=Number(c);
Jsonix.Util.Ensure.ensureInteger(d);
return d
},parseSecond:function(c){Jsonix.Util.Ensure.ensureString(c);
if(c.length!==2){throw new Error("Second ["+c+"] must be a two-digit number.")
}var d=Number(c);
Jsonix.Util.Ensure.ensureNumber(d);
return d
},parseFractionalSecond:function(c){Jsonix.Util.Ensure.ensureString(c);
if(c===""){return 0
}else{var d=Number(c);
Jsonix.Util.Ensure.ensureNumber(d);
return d
}},print:function(b){if(Jsonix.Util.Type.isString(b)){return b
}Jsonix.Util.Ensure.ensureObject(b);
if(Jsonix.Util.NumberUtils.isInteger(b.year)&&Jsonix.Util.NumberUtils.isInteger(b.month)&&Jsonix.Util.NumberUtils.isInteger(b.day)&&Jsonix.Util.NumberUtils.isInteger(b.hour)&&Jsonix.Util.NumberUtils.isInteger(b.minute)&&Jsonix.Util.NumberUtils.isInteger(b.second)){return this.printDateTime(b)
}else{if(Jsonix.Util.NumberUtils.isInteger(b.year)&&Jsonix.Util.NumberUtils.isInteger(b.month)&&Jsonix.Util.NumberUtils.isInteger(b.day)){return this.printDate(b)
}else{if(Jsonix.Util.NumberUtils.isInteger(b.hour)&&Jsonix.Util.NumberUtils.isInteger(b.minute)&&Jsonix.Util.NumberUtils.isInteger(b.second)){return this.printTime(b)
}else{throw new Error("Value ["+b+"] is not recognized as dateTime, date or time.")
}}}},printDateTime:function(c){Jsonix.Util.Ensure.ensureObject(c);
Jsonix.Util.Ensure.ensureInteger(c.year);
Jsonix.Util.Ensure.ensureInteger(c.month);
Jsonix.Util.Ensure.ensureInteger(c.day);
Jsonix.Util.Ensure.ensureInteger(c.hour);
Jsonix.Util.Ensure.ensureInteger(c.minute);
Jsonix.Util.Ensure.ensureNumber(c.second);
if(Jsonix.Util.Type.exists(c.fractionalString)){Jsonix.Util.Ensure.ensureNumber(c.fractionalString)
}if(Jsonix.Util.Type.exists(c.timezone)&&!Jsonix.Util.Type.isNaN(c.timezone)){Jsonix.Util.Ensure.ensureInteger(c.timezone)
}var d=this.printDateString(c);
d=d+"T";
d=d+this.printTimeString(c);
if(Jsonix.Util.Type.exists(c.timezone)){d=d+this.printTimeZoneString(c.timezone)
}return d
},printDate:function(c){Jsonix.Util.Ensure.ensureObject(c);
Jsonix.Util.Ensure.ensureNumber(c.year);
Jsonix.Util.Ensure.ensureNumber(c.month);
Jsonix.Util.Ensure.ensureNumber(c.day);
if(Jsonix.Util.Type.exists(c.timezone)&&!Jsonix.Util.Type.isNaN(c.timezone)){Jsonix.Util.Ensure.ensureInteger(c.timezone)
}var d=this.printDateString(c);
if(Jsonix.Util.Type.exists(c.timezone)){d=d+this.printTimeZoneString(c.timezone)
}return d
},printTime:function(c){Jsonix.Util.Ensure.ensureObject(c);
Jsonix.Util.Ensure.ensureNumber(c.hour);
Jsonix.Util.Ensure.ensureNumber(c.minute);
Jsonix.Util.Ensure.ensureNumber(c.second);
if(Jsonix.Util.Type.exists(c.fractionalString)){Jsonix.Util.Ensure.ensureNumber(c.fractionalString)
}if(Jsonix.Util.Type.exists(c.timezone)&&!Jsonix.Util.Type.isNaN(c.timezone)){Jsonix.Util.Ensure.ensureInteger(c.timezone)
}var d=this.printTimeString(c);
if(Jsonix.Util.Type.exists(c.timezone)){d=d+this.printTimeZoneString(c.timezone)
}return d
},printDateString:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Util.Ensure.ensureInteger(b.year);
Jsonix.Util.Ensure.ensureInteger(b.month);
Jsonix.Util.Ensure.ensureInteger(b.day);
return(b.year<0?("-"+this.printYear(-b.year)):this.printYear(b.year))+"-"+this.printMonth(b.month)+"-"+this.printDay(b.day)
},printTimeString:function(c){Jsonix.Util.Ensure.ensureObject(c);
Jsonix.Util.Ensure.ensureInteger(c.hour);
Jsonix.Util.Ensure.ensureInteger(c.minute);
Jsonix.Util.Ensure.ensureInteger(c.second);
if(Jsonix.Util.Type.exists(c.fractionalSecond)){Jsonix.Util.Ensure.ensureNumber(c.fractionalSecond)
}var d=this.printHour(c.hour);
d=d+":";
d=d+this.printMinute(c.minute);
d=d+":";
d=d+this.printSecond(c.second);
if(Jsonix.Util.Type.exists(c.fractionalSecond)){d=d+this.printFractionalSecond(c.fractionalSecond)
}return d
},printTimeZoneString:function(l){if(!Jsonix.Util.Type.exists(l)||Jsonix.Util.Type.isNaN(l)){return""
}else{Jsonix.Util.Ensure.ensureInteger(l);
var h=l<0?-1:(l>0?1:0);
var g=l*h;
var k=g%60;
var i=Math.floor(g/60);
var j;
if(h===0){return"Z"
}else{if(h>0){j="+"
}else{if(h<0){j="-"
}}j=j+this.printHour(i);
j=j+":";
j=j+this.printMinute(k);
return j
}}},printYear:function(b){return this.printInteger(b,4)
},printMonth:function(b){return this.printInteger(b,2)
},printDay:function(b){return this.printInteger(b,2)
},printHour:function(b){return this.printInteger(b,2)
},printMinute:function(b){return this.printInteger(b,2)
},printSecond:function(b){return this.printInteger(b,2)
},printFractionalSecond:function(e){Jsonix.Util.Ensure.ensureNumber(e);
if(e<0||e>=1){throw new Error("Fractional second ["+e+"] must be between 0 and 1.")
}else{if(e===0){return""
}else{var d=String(e);
var f=d.indexOf(".");
if(f<0){return""
}else{return d.substring(f)
}}}},printInteger:function(e,f){Jsonix.Util.Ensure.ensureInteger(e);
Jsonix.Util.Ensure.ensureInteger(f);
if(f<=0){throw new Error("Length ["+e+"] must be positive.")
}if(e<0){throw new Error("Value ["+e+"] must not be negative.")
}if(e>=Math.pow(10,f)){throw new Error("Value ["+e+"] must be less than ["+Math.pow(10,f)+"].")
}var h=String(e);
for(var g=h.length;
g<f;
g++){h="0"+h
}return h
},isInstance:function(b){return Jsonix.Util.Type.isObject(b)&&((Jsonix.Util.NumberUtils.isInteger(b.year)&&Jsonix.Util.NumberUtils.isInteger(b.month)&&Jsonix.Util.NumberUtils.isInteger(b.day))||(Jsonix.Util.NumberUtils.isInteger(b.hour)&&Jsonix.Util.NumberUtils.isInteger(b.minute)&&Jsonix.Util.NumberUtils.isInteger(b.second)))
},CLASS_NAME:"Jsonix.Schema.XSD.Calendar"});
Jsonix.Schema.XSD.Calendar.INSTANCE=new Jsonix.Schema.XSD.Calendar();
Jsonix.Schema.XSD.Calendar.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Calendar.INSTANCE);
Jsonix.Schema.XSD.Duration=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"Duration",typeName:Jsonix.Schema.XSD.qname("duration"),CLASS_NAME:"Jsonix.Schema.XSD.Duration"});
Jsonix.Schema.XSD.Duration.INSTANCE=new Jsonix.Schema.XSD.Duration();
Jsonix.Schema.XSD.Duration.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Duration.INSTANCE);
Jsonix.Schema.XSD.DateTime=Jsonix.Class(Jsonix.Schema.XSD.Calendar,{name:"DateTime",typeName:Jsonix.Schema.XSD.qname("dateTime"),parse:function(f){var e=this.parseDateTime(f);
var d=new Date();
d.setFullYear(e.year);
d.setMonth(e.month-1);
d.setDate(e.day);
d.setHours(e.hour);
d.setMinutes(e.minute);
d.setSeconds(e.second);
if(Jsonix.Util.Type.isNumber(e.fractionalSecond)){d.setMilliseconds(Math.floor(1000*e.fractionalSecond))
}if(Jsonix.Util.NumberUtils.isInteger(e.timezone)){return new Date(d.getTime()-(60000*d.getTimezoneOffset())+(e.timezone*60000))
}else{return d
}},print:function(b){Jsonix.Util.Ensure.ensureDate(b);
return this.printDateTime(new Jsonix.XML.Calendar({year:b.getFullYear(),month:b.getMonth()+1,day:b.getDate(),hour:b.getHours(),minute:b.getMinutes(),second:b.getSeconds(),fractionalSecond:(b.getMilliseconds()/1000)}))
},isInstance:function(b){return Jsonix.Util.Type.isDate(b)
},CLASS_NAME:"Jsonix.Schema.XSD.DateTime"});
Jsonix.Schema.XSD.DateTime.INSTANCE=new Jsonix.Schema.XSD.DateTime();
Jsonix.Schema.XSD.DateTime.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.DateTime.INSTANCE);
Jsonix.Schema.XSD.Time=Jsonix.Class(Jsonix.Schema.XSD.Calendar,{name:"Time",typeName:Jsonix.Schema.XSD.qname("time"),parse:function(g){var j=this.parseTime(g);
if(Jsonix.Util.NumberUtils.isInteger(j.timezone)){var h=new Date(70,0,1,j.hour,j.minute,j.second);
if(Jsonix.Util.Type.isNumber(j.fractionalSecond)){h.setMilliseconds(Math.floor(1000*j.fractionalSecond))
}var f=h.getTime()-(j.timezone*60000);
return new Date(f-(60000*h.getTimezoneOffset()))
}else{var i=new Date(70,0,1,j.hour,j.minute,j.second);
if(Jsonix.Util.Type.isNumber(j.fractionalSecond)){i.setMilliseconds(Math.floor(1000*j.fractionalSecond))
}return i
}},print:function(f){Jsonix.Util.Ensure.ensureDate(f);
var e=f.getTime();
if(e<=-86400000&&e>=86400000){throw new Error("Invalid time ["+f+"].")
}if(e>=0){return this.printTime(new Jsonix.XML.Calendar({hour:f.getHours(),minute:f.getMinutes(),second:f.getSeconds(),fractionalSecond:(f.getMilliseconds()/1000)}))
}else{var d=Math.ceil(-e/3600000);
return this.printTime(new Jsonix.XML.Calendar({hour:(f.getUTCHours()+d)%24,minute:f.getUTCMinutes(),second:f.getUTCSeconds(),fractionalSecond:(f.getUTCMilliseconds()/1000),timezone:d*60}))
}},isInstance:function(b){return Jsonix.Util.Type.isDate(b)&&b.getTime()>-86400000&&b.getTime()<86400000
},CLASS_NAME:"Jsonix.Schema.XSD.Time"});
Jsonix.Schema.XSD.Time.INSTANCE=new Jsonix.Schema.XSD.Time();
Jsonix.Schema.XSD.Time.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Time.INSTANCE);
Jsonix.Schema.XSD.Date=Jsonix.Class(Jsonix.Schema.XSD.Calendar,{name:"Date",typeName:Jsonix.Schema.XSD.qname("date"),parse:function(f){var e=this.parseDate(f);
if(Jsonix.Util.NumberUtils.isInteger(e.timezone)){var g=new Date();
g.setFullYear(e.year);
g.setMonth(e.month-1);
g.setDate(e.day);
g.setHours(0);
g.setMinutes(0);
g.setSeconds(0);
g.setMilliseconds(0);
return new Date(g.getTime()-(60000*g.getTimezoneOffset())+(e.timezone*60000))
}else{var h=new Date();
h.setFullYear(e.year);
h.setMonth(e.month-1);
h.setDate(e.day);
h.setHours(0);
h.setMinutes(0);
h.setSeconds(0);
h.setMilliseconds(0);
return h
}},print:function(g){Jsonix.Util.Ensure.ensureDate(g);
var i=new Date(g.getTime());
i.setHours(0);
i.setMinutes(0);
i.setSeconds(0);
i.setMilliseconds(0);
var j=g.getTime()-i.getTime();
if(j===0){return this.printDate(new Jsonix.XML.Calendar({year:g.getFullYear(),month:g.getMonth()+1,day:g.getDate()}))
}else{var h=j+(60000*g.getTimezoneOffset());
if(h<=43200000){return this.printDate(new Jsonix.XML.Calendar({year:g.getFullYear(),month:g.getMonth()+1,day:g.getDate(),timezone:Math.floor(h/(60000))}))
}else{var f=new Date(g.getTime()+86400000);
return this.printDate(new Jsonix.XML.Calendar({year:f.getFullYear(),month:f.getMonth()+1,day:f.getDate(),timezone:(Math.floor(h/(60000))-1440)}))
}}},isInstance:function(b){return Jsonix.Util.Type.isDate(b)
},CLASS_NAME:"Jsonix.Schema.XSD.Date"});
Jsonix.Schema.XSD.Date.INSTANCE=new Jsonix.Schema.XSD.Date();
Jsonix.Schema.XSD.Date.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.Date.INSTANCE);
Jsonix.Schema.XSD.GYearMonth=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"GYearMonth",typeName:Jsonix.Schema.XSD.qname("gYearMonth"),CLASS_NAME:"Jsonix.Schema.XSD.GYearMonth"});
Jsonix.Schema.XSD.GYearMonth.INSTANCE=new Jsonix.Schema.XSD.GYearMonth();
Jsonix.Schema.XSD.GYearMonth.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.GYearMonth.INSTANCE);
Jsonix.Schema.XSD.GYear=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"GYear",typeName:Jsonix.Schema.XSD.qname("gYear"),CLASS_NAME:"Jsonix.Schema.XSD.GYear"});
Jsonix.Schema.XSD.GYear.INSTANCE=new Jsonix.Schema.XSD.GYear();
Jsonix.Schema.XSD.GYear.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.GYear.INSTANCE);
Jsonix.Schema.XSD.GMonthDay=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"GMonthDay",typeName:Jsonix.Schema.XSD.qname("gMonthDay"),CLASS_NAME:"Jsonix.Schema.XSD.GMonthDay"});
Jsonix.Schema.XSD.GMonthDay.INSTANCE=new Jsonix.Schema.XSD.GMonthDay();
Jsonix.Schema.XSD.GMonthDay.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.GMonthDay.INSTANCE);
Jsonix.Schema.XSD.GDay=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"GDay",typeName:Jsonix.Schema.XSD.qname("gDay"),CLASS_NAME:"Jsonix.Schema.XSD.GDay"});
Jsonix.Schema.XSD.GDay.INSTANCE=new Jsonix.Schema.XSD.GDay();
Jsonix.Schema.XSD.GDay.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.GDay.INSTANCE);
Jsonix.Schema.XSD.GMonth=Jsonix.Class(Jsonix.Schema.XSD.AnySimpleType,{name:"GMonth",typeName:Jsonix.Schema.XSD.qname("gMonth"),CLASS_NAME:"Jsonix.Schema.XSD.GMonth"});
Jsonix.Schema.XSD.GMonth.INSTANCE=new Jsonix.Schema.XSD.GMonth();
Jsonix.Schema.XSD.GMonth.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.GMonth.INSTANCE);
Jsonix.Schema.XSD.ID=Jsonix.Class(Jsonix.Schema.XSD.String,{name:"ID",typeName:Jsonix.Schema.XSD.qname("ID"),CLASS_NAME:"Jsonix.Schema.XSD.ID"});
Jsonix.Schema.XSD.ID.INSTANCE=new Jsonix.Schema.XSD.ID();
Jsonix.Schema.XSD.ID.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.ID.INSTANCE);
Jsonix.Schema.XSD.IDREF=Jsonix.Class(Jsonix.Schema.XSD.String,{name:"IDREF",typeName:Jsonix.Schema.XSD.qname("IDREF"),CLASS_NAME:"Jsonix.Schema.XSD.IDREF"});
Jsonix.Schema.XSD.IDREF.INSTANCE=new Jsonix.Schema.XSD.IDREF();
Jsonix.Schema.XSD.IDREF.INSTANCE.LIST=new Jsonix.Schema.XSD.List(Jsonix.Schema.XSD.IDREF.INSTANCE);
Jsonix.Schema.XSD.IDREFS=Jsonix.Class(Jsonix.Schema.XSD.List,{name:"IDREFS",initialize:function(){Jsonix.Schema.XSD.List.prototype.initialize.apply(this,[Jsonix.Schema.XSD.IDREF.INSTANCE,Jsonix.Schema.XSD.qname("IDREFS")," "])
},CLASS_NAME:"Jsonix.Schema.XSD.IDREFS"});
Jsonix.Schema.XSD.IDREFS.INSTANCE=new Jsonix.Schema.XSD.IDREFS();
Jsonix.Model.Adapter=Jsonix.Class({initialize:function(){},unmarshal:function(f,d,e){return e.unmarshal(f,d)
},marshal:function(g,e,h,f){f.marshal(g,e,h)
},CLASS_NAME:"Jsonix.Model.Adapter"});
Jsonix.Model.Adapter.INSTANCE=new Jsonix.Model.Adapter();
Jsonix.Model.Adapter.getAdapter=function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Util.Ensure.ensureObject(b.typeInfo);
return Jsonix.Util.Type.exists(b.adapter)?b.adapter:Jsonix.Model.Adapter.INSTANCE
};
Jsonix.Model.ClassInfo=Jsonix.Class(Jsonix.Model.TypeInfo,{name:null,baseTypeInfo:null,properties:null,structure:null,defaultElementNamespaceURI:"",defaultAttributeNamespaceURI:"",built:false,initialize:function(c){Jsonix.Model.TypeInfo.prototype.initialize.apply(this,[]);
Jsonix.Util.Ensure.ensureObject(c);
Jsonix.Util.Ensure.ensureString(c.name);
this.name=c.name;
if(Jsonix.Util.Type.isString(c.defaultElementNamespaceURI)){this.defaultElementNamespaceURI=c.defaultElementNamespaceURI
}if(Jsonix.Util.Type.isString(c.defaultAttributeNamespaceURI)){this.defaultAttributeNamespaceURI=c.defaultAttributeNamespaceURI
}if(Jsonix.Util.Type.exists(c.baseTypeInfo)){this.baseTypeInfo=c.baseTypeInfo
}this.properties=[];
if(Jsonix.Util.Type.exists(c.propertyInfos)){Jsonix.Util.Ensure.ensureArray(c.propertyInfos);
for(var d=0;
d<c.propertyInfos.length;
d++){this.p(c.propertyInfos[d])
}}},destroy:function(){},build:function(f,g){if(!this.built){this.baseTypeInfo=f.resolveTypeInfo(this.baseTypeInfo,g);
for(var h=0;
h<this.properties.length;
h++){var j=this.properties[h];
j.build(f,g)
}var i={elements:null,attributes:{},anyAttribute:null,value:null,any:null};
if(Jsonix.Util.Type.exists(this.baseTypeInfo)){this.baseTypeInfo.buildStructure(f,i)
}this.buildStructure(f,i);
this.structure=i
}},buildStructure:function(f,h){for(var g=0;
g<this.properties.length;
g++){var e=this.properties[g];
e.buildStructure(f,h)
}},unmarshal:function(z,t){this.build(z);
var y={TYPE_NAME:this.name};
if(t.eventType!==1){throw new Error("Parser must be on START_ELEMENT to read a class info.")
}if(Jsonix.Util.Type.exists(this.structure.attributes)){var C=t.getAttributeCount();
if(C!==0){for(var w=0;
w<C;
w++){var r=t.getAttributeNameKey(w);
if(Jsonix.Util.Type.exists(this.structure.attributes[r])){var x=t.getAttributeValue(w);
if(Jsonix.Util.Type.isString(x)){var A=this.structure.attributes[r];
this.unmarshalPropertyValue(z,t,A,y,x)
}}}}}if(Jsonix.Util.Type.exists(this.structure.anyAttribute)){var v=this.structure.anyAttribute;
this.unmarshalProperty(z,t,v,y)
}if(Jsonix.Util.Type.exists(this.structure.elements)){var s=t.next();
while(s!==Jsonix.XML.Input.END_ELEMENT){if(s===Jsonix.XML.Input.START_ELEMENT){var B=t.getNameKey();
if(Jsonix.Util.Type.exists(this.structure.elements[B])){var D=this.structure.elements[B];
this.unmarshalProperty(z,t,D,y)
}else{if(Jsonix.Util.Type.exists(this.structure.any)){var p=this.structure.any;
this.unmarshalProperty(z,t,p,y)
}else{throw new Error("Unexpected element ["+B+"].")
}}}else{if((s===Jsonix.XML.Input.CHARACTERS||s===Jsonix.XML.Input.CDATA||s===Jsonix.XML.Input.ENTITY_REFERENCE)&&Jsonix.Util.Type.exists(this.structure.mixed)){var u=this.structure.mixed;
this.unmarshalProperty(z,t,u,y)
}else{if(s===Jsonix.XML.Input.SPACE||s===Jsonix.XML.Input.COMMENT||s===Jsonix.XML.Input.PROCESSING_INSTRUCTION){}else{throw new Error("Illegal state: unexpected event type ["+s+"].")
}}}s=t.next()
}}else{if(Jsonix.Util.Type.exists(this.structure.value)){var q=this.structure.value;
this.unmarshalProperty(z,t,q,y)
}else{t.nextTag()
}}if(t.eventType!==2){throw new Error("Illegal state: must be END_ELEMENT.")
}return y
},unmarshalProperty:function(f,g,j,i){var h=j.unmarshal(f,this,g);
j.setProperty(i,h)
},unmarshalPropertyValue:function(g,h,k,j,l){var i=k.unmarshalValue(g,this,h,l);
k.setProperty(j,i)
},marshal:function(g,k,i){if(Jsonix.Util.Type.exists(this.baseTypeInfo)){this.baseTypeInfo.marshal(g,k,i)
}for(var h=0;
h<this.properties.length;
h++){var l=this.properties[h];
var j=k[l.name];
if(Jsonix.Util.Type.exists(j)){l.marshal(g,this,j,i)
}}},isInstance:function(b){return Jsonix.Util.Type.isObject(b)&&Jsonix.Util.Type.isString(b.TYPE_NAME)&&b.TYPE_NAME===this.name
},b:function(b){Jsonix.Util.Ensure.ensureObject(b);
this.baseTypeInfo=b;
return this
},ps:function(){return this
},p:function(e){Jsonix.Util.Ensure.ensureObject(e);
if(e instanceof Jsonix.Model.PropertyInfo){this.addProperty(e)
}else{Jsonix.Util.Ensure.ensureString(e.type);
var f=e.type;
if(Jsonix.Util.Type.isFunction(this.propertyInfoCreators[f])){var d=this.propertyInfoCreators[f];
d.call(this,e)
}else{throw new Error("Unknown property info type ["+f+"].")
}}},aa:function(b){this.addDefaultNamespaces(b);
return this.addProperty(new Jsonix.Model.AnyAttributePropertyInfo(b))
},ae:function(b){this.addDefaultNamespaces(b);
return this.addProperty(new Jsonix.Model.AnyElementPropertyInfo(b))
},a:function(b){this.addDefaultNamespaces(b);
return this.addProperty(new Jsonix.Model.AttributePropertyInfo(b))
},em:function(b){this.addDefaultNamespaces(b);
return this.addProperty(new Jsonix.Model.ElementMapPropertyInfo(b))
},e:function(b){this.addDefaultNamespaces(b);
return this.addProperty(new Jsonix.Model.ElementPropertyInfo(b))
},es:function(b){this.addDefaultNamespaces(b);
return this.addProperty(new Jsonix.Model.ElementsPropertyInfo(b))
},er:function(b){this.addDefaultNamespaces(b);
return this.addProperty(new Jsonix.Model.ElementRefPropertyInfo(b))
},ers:function(b){this.addDefaultNamespaces(b);
return this.addProperty(new Jsonix.Model.ElementRefsPropertyInfo(b))
},v:function(b){this.addDefaultNamespaces(b);
return this.addProperty(new Jsonix.Model.ValuePropertyInfo(b))
},addDefaultNamespaces:function(b){if(Jsonix.Util.Type.isObject(b)){if(!Jsonix.Util.Type.isString(b.defaultElementNamespaceURI)){b.defaultElementNamespaceURI=this.defaultElementNamespaceURI
}if(!Jsonix.Util.Type.isString(b.defaultAttributeNamespaceURI)){b.defaultAttributeNamespaceURI=this.defaultAttributeNamespaceURI
}}},addProperty:function(b){this.properties.push(b);
return this
},CLASS_NAME:"Jsonix.Model.ClassInfo"});
Jsonix.Model.ClassInfo.prototype.propertyInfoCreators={anyAttribute:Jsonix.Model.ClassInfo.prototype.aa,anyElement:Jsonix.Model.ClassInfo.prototype.ae,attribute:Jsonix.Model.ClassInfo.prototype.a,elementMap:Jsonix.Model.ClassInfo.prototype.em,element:Jsonix.Model.ClassInfo.prototype.e,elements:Jsonix.Model.ClassInfo.prototype.es,elementRef:Jsonix.Model.ClassInfo.prototype.er,elementRefs:Jsonix.Model.ClassInfo.prototype.ers,value:Jsonix.Model.ClassInfo.prototype.v};
Jsonix.Model.ElementInfo=Jsonix.Class({elementName:null,typeInfo:null,substitutionHead:null,scope:null,built:false,initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Util.Ensure.ensureObject(b.elementName);
this.elementName=b.elementName;
Jsonix.Util.Ensure.ensureExists(b.typeInfo);
this.typeInfo=b.typeInfo;
if(Jsonix.Util.Type.exists(b.substitutionHead)){this.substitutionHead=b.substitutionHead
}if(Jsonix.Util.Type.exists(b.scope)){this.scope=b.scope
}},build:function(c,d){if(!this.built){this.typeInfo=c.resolveTypeInfo(this.typeInfo,d);
this.scope=c.resolveTypeInfo(this.scope,d);
this.built=true
}},CLASS_NAME:"Jsonix.Model.ElementInfo"});
Jsonix.Model.PropertyInfo=Jsonix.Class({name:null,collection:false,defaultElementNamespaceURI:"",defaultAttributeNamespaceURI:"",built:false,initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Util.Ensure.ensureString(b.name);
this.name=b.name;
if(Jsonix.Util.Type.isString(b.defaultElementNamespaceURI)){this.defaultElementNamespaceURI=b.defaultElementNamespaceURI
}if(Jsonix.Util.Type.isString(b.defaultAttributeNamespaceURI)){this.defaultAttributeNamespaceURI=b.defaultAttributeNamespaceURI
}if(Jsonix.Util.Type.isBoolean(b.collection)){this.collection=b.collection
}else{this.collection=false
}},build:function(c,d){if(!this.built){this.doBuild(c,d);
this.built=true
}},doBuild:function(c,d){throw new Error("Abstract method [doBuild].")
},buildStructure:function(c,d){throw new Error("Abstract method [buildStructure].")
},setProperty:function(f,e){if(Jsonix.Util.Type.exists(e)){if(this.collection){Jsonix.Util.Ensure.ensureArray(e,"Collection property requires an array value.");
if(!Jsonix.Util.Type.exists(f[this.name])){f[this.name]=[]
}for(var d=0;
d<e.length;
d++){f[this.name].push(e[d])
}}else{f[this.name]=e
}}},CLASS_NAME:"Jsonix.Model.PropertyInfo"});
Jsonix.Model.AnyAttributePropertyInfo=Jsonix.Class(Jsonix.Model.PropertyInfo,{initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Model.PropertyInfo.prototype.initialize.apply(this,[b])
},unmarshal:function(j,p,m){var k=m.getAttributeCount();
if(k===0){return null
}else{var o={};
for(var l=0;
l<k;
l++){var n=m.getAttributeNameKey(l);
var i=m.getAttributeValue(l);
if(Jsonix.Util.Type.isString(i)){o[n]=i
}}return o
}},marshal:function(h,l,k,j){if(!Jsonix.Util.Type.isObject(k)){return
}for(var i in k){if(k.hasOwnProperty(i)){var g=k[i];
if(Jsonix.Util.Type.isString(g)){j.writeAttribute(Jsonix.XML.QName.fromString(i),g)
}}}},doBuild:function(c,d){},buildStructure:function(c,d){Jsonix.Util.Ensure.ensureObject(d);
d.anyAttribute=this
},CLASS_NAME:"Jsonix.Model.AnyAttributePropertyInfo"});
Jsonix.Model.SingleTypePropertyInfo=Jsonix.Class(Jsonix.Model.PropertyInfo,{typeInfo:"String",initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Model.PropertyInfo.prototype.initialize.apply(this,[b]);
if(Jsonix.Util.Type.exists(b.typeInfo)){this.typeInfo=b.typeInfo
}},doBuild:function(c,d){this.typeInfo=c.resolveTypeInfo(this.typeInfo,d)
},unmarshalValue:function(g,f,h,e){return this.parse(g,f,e)
},parse:function(d,f,e){return this.typeInfo.parse(e)
},print:function(d,f,e){return this.typeInfo.print(e)
},CLASS_NAME:"Jsonix.Model.SingleTypePropertyInfo"});
Jsonix.Model.AttributePropertyInfo=Jsonix.Class(Jsonix.Model.SingleTypePropertyInfo,{attributeName:null,initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Model.SingleTypePropertyInfo.prototype.initialize.apply(this,[b]);
if(Jsonix.Util.Type.isObject(b.attributeName)){Jsonix.Util.Ensure.ensureString(b.attributeName.localPart,"Attribute name must contain a string property [localPart].");
this.attributeName=Jsonix.XML.QName.fromObject(b.attributeName)
}else{if(Jsonix.Util.Type.isString(b.attributeName)){this.attributeName=new Jsonix.XML.QName(this.defaultAttributeNamespaceURI,b.attributeName)
}else{this.attributeName=new Jsonix.XML.QName(this.defaultAttributeNamespaceURI,this.name)
}}},unmarshal:function(j,p,m){var k=m.getAttributeCount();
var o=null;
for(var l=0;
l<k;
l++){var n=m.getAttributeNameKey(l);
if(this.attributeName.key===n){var i=m.getAttributeValue(l);
if(Jsonix.Util.Type.isString(i)){o=this.unmarshalValue(j,p,m,i)
}}}return o
},marshal:function(g,f,e,h){if(Jsonix.Util.Type.exists(e)){h.writeAttribute(this.attributeName,this.print(g,f,e))
}},buildStructure:function(e,d){Jsonix.Util.Ensure.ensureObject(d);
Jsonix.Util.Ensure.ensureObject(d.attributes);
var f=this.attributeName.key;
d.attributes[f]=this
},CLASS_NAME:"Jsonix.Model.AttributePropertyInfo"});
Jsonix.Model.ValuePropertyInfo=Jsonix.Class(Jsonix.Model.SingleTypePropertyInfo,{initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Model.SingleTypePropertyInfo.prototype.initialize.apply(this,[b])
},unmarshal:function(g,f,h){var e=h.getElementText();
if(Jsonix.Util.StringUtils.isNotBlank(e)){return this.unmarshalValue(g,f,h,e)
}else{return null
}},marshal:function(g,f,e,h){if(!Jsonix.Util.Type.exists(e)){return
}h.writeCharacters(this.print(g,f,e))
},buildStructure:function(c,d){Jsonix.Util.Ensure.ensureObject(d);
if(Jsonix.Util.Type.exists(d.elements)){throw new Error("The structure already defines element mappings, it cannot define a value property.")
}else{d.value=this
}},CLASS_NAME:"Jsonix.Model.ValuePropertyInfo"});
Jsonix.Model.AbstractElementsPropertyInfo=Jsonix.Class(Jsonix.Model.PropertyInfo,{wrapperElementName:null,initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Model.PropertyInfo.prototype.initialize.apply(this,[b]);
if(Jsonix.Util.Type.isObject(b.wrapperElementName)){Jsonix.Util.Ensure.ensureString(b.wrapperElementName.localPart,"Wrapper element name must contain a string property [localPart].");
this.wrapperElementName=Jsonix.XML.QName.fromObject(b.wrapperElementName)
}else{if(Jsonix.Util.Type.isString(b.wrapperElementName)){this.wrapperElementName=new Jsonix.XML.QName(this.defaultElementNamespaceURI,b.wrapperElementName)
}else{this.wrapperElementName=null
}}},unmarshal:function(h,g,i){var j=null;
var l=this;
var k=function(a){if(l.collection){if(j===null){j=[]
}j.push(a)
}else{if(j===null){j=a
}else{throw new Error("Value already set.")
}}};
if(Jsonix.Util.Type.exists(this.wrapperElementName)){this.unmarshalWrapperElement(h,i,k)
}else{this.unmarshalElement(h,i,k)
}return j
},unmarshalWrapperElement:function(g,h,e){var f=h.next();
while(f!==Jsonix.XML.Input.END_ELEMENT){if(f===Jsonix.XML.Input.START_ELEMENT){this.unmarshalElement(g,h,e)
}else{if(f===Jsonix.XML.Input.SPACE||f===Jsonix.XML.Input.COMMENT||f===Jsonix.XML.Input.PROCESSING_INSTRUCTION){}else{throw new Error("Illegal state: unexpected event type ["+f+"].")
}}f=h.next()
}},unmarshalElement:function(f,d,e){throw new Error("Abstract method [unmarshalElement].")
},marshal:function(h,g,k,j){if(!Jsonix.Util.Type.exists(k)){return
}if(Jsonix.Util.Type.exists(this.wrapperElementName)){j.writeStartElement(this.wrapperElementName)
}if(!this.collection){this.marshalElement(h,k,j)
}else{Jsonix.Util.Ensure.ensureArray(k);
for(var i=0;
i<k.length;
i++){var l=k[i];
this.marshalElement(h,l,j)
}}if(Jsonix.Util.Type.exists(this.wrapperElementName)){j.writeEndElement()
}},marshalElement:function(f,e,d){throw new Error("Abstract method [marshalElement].")
},marshalElementTypeInfo:function(g,j,i,f,h){h.writeStartElement(i);
f.marshal(g,j,h);
h.writeEndElement()
},buildStructure:function(c,d){Jsonix.Util.Ensure.ensureObject(d);
if(Jsonix.Util.Type.exists(d.value)){throw new Error("The structure already defines a value property.")
}else{if(!Jsonix.Util.Type.exists(d.elements)){d.elements={}
}}if(Jsonix.Util.Type.exists(this.wrapperElementName)){d.elements[this.wrapperElementName.key]=this
}else{this.buildStructureElements(c,d)
}},buildStructureElements:function(c,d){throw new Error("Abstract method [buildStructureElements].")
},CLASS_NAME:"Jsonix.Model.AbstractElementsPropertyInfo"});
Jsonix.Model.ElementPropertyInfo=Jsonix.Class(Jsonix.Model.AbstractElementsPropertyInfo,{typeInfo:"String",elementName:null,initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Model.AbstractElementsPropertyInfo.prototype.initialize.apply(this,[b]);
if(Jsonix.Util.Type.exists(b.typeInfo)){if(Jsonix.Util.Type.isObject(b.typeInfo)){Jsonix.Util.Ensure.ensureObject(b.typeInfo);
this.typeInfo=b.typeInfo
}else{Jsonix.Util.Ensure.ensureString(b.typeInfo);
this.typeInfo=b.typeInfo
}}if(Jsonix.Util.Type.isObject(b.elementName)){this.elementName=Jsonix.XML.QName.fromObject(b.elementName)
}else{if(Jsonix.Util.Type.isString(b.elementName)){this.elementName=new Jsonix.XML.QName(this.defaultElementNamespaceURI,b.elementName)
}else{this.elementName=new Jsonix.XML.QName(this.defaultElementNamespaceURI,this.name)
}}},unmarshalElement:function(f,d,e){return e(this.typeInfo.unmarshal(f,d))
},marshalElement:function(f,e,d){this.marshalElementTypeInfo(f,e,this.elementName,this.typeInfo,d)
},doBuild:function(c,d){this.typeInfo=c.resolveTypeInfo(this.typeInfo,d)
},buildStructureElements:function(c,d){d.elements[this.elementName.key]=this
},CLASS_NAME:"Jsonix.Model.ElementPropertyInfo"});
Jsonix.Model.ElementsPropertyInfo=Jsonix.Class(Jsonix.Model.AbstractElementsPropertyInfo,{elementTypeInfos:null,elementTypeInfosMap:null,initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Model.AbstractElementsPropertyInfo.prototype.initialize.apply(this,[b]);
Jsonix.Util.Ensure.ensureArray(b.elementTypeInfos);
this.elementTypeInfos=b.elementTypeInfos
},unmarshalElement:function(h,i,j){var g=i.getNameKey();
var f=this.elementTypeInfosMap[g];
if(Jsonix.Util.Type.exists(f)){return j(f.unmarshal(h,i))
}throw new Error("Element ["+g+"] is not known in this context")
},marshalElement:function(h,m,j){for(var i=0;
i<this.elementTypeInfos.length;
i++){var k=this.elementTypeInfos[i];
var n=k.typeInfo;
if(n.isInstance(m)){var l=k.elementName;
this.marshalElementTypeInfo(h,m,l,n,j);
return
}}throw new Error("Could not find an element with type info supporting the value ["+m+"].")
},doBuild:function(e,f){this.elementTypeInfosMap={};
for(var g=0;
g<this.elementTypeInfos.length;
g++){var h=this.elementTypeInfos[g];
h.typeInfo=e.resolveTypeInfo(h.typeInfo,f);
Jsonix.Util.Ensure.ensureObject(h);
if(Jsonix.Util.Type.isObject(h.elementName)){Jsonix.Util.Ensure.ensureString(h.elementName.localPart,"Element name must contain a string property [localPart].");
h.elementName=Jsonix.XML.QName.fromObject(h.elementName)
}else{Jsonix.Util.Ensure.ensureString(h.elementName);
h.elementName=new Jsonix.XML.QName(this.defaultElementNamespaceURI,h.elementName)
}this.elementTypeInfosMap[h.elementName.key]=h.typeInfo
}},buildStructureElements:function(e,h){for(var f=0;
f<this.elementTypeInfos.length;
f++){var g=this.elementTypeInfos[f];
h.elements[g.elementName.key]=this
}},CLASS_NAME:"Jsonix.Model.ElementsPropertyInfo"});
Jsonix.Model.ElementMapPropertyInfo=Jsonix.Class(Jsonix.Model.AbstractElementsPropertyInfo,{elementName:null,key:null,value:null,entryTypeInfo:null,initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Model.AbstractElementsPropertyInfo.prototype.initialize.apply(this,[b]);
Jsonix.Util.Ensure.ensureObject(b.key);
Jsonix.Util.Ensure.ensureObject(b.value);
if(Jsonix.Util.Type.isObject(b.elementName)){Jsonix.Util.Ensure.ensureString(b.elementName.localPart,"Element name must contain a string property [localPart].");
this.elementName=Jsonix.XML.QName.fromObject(b.elementName)
}else{if(Jsonix.Util.Type.isString(b.elementName)){this.elementName=new Jsonix.XML.QName(this.defaultElementNamespaceURI,b.elementName)
}else{this.elementName=new Jsonix.XML.QName(this.defaultElementNamespaceURI,this.name)
}}this.entryTypeInfo=new Jsonix.Model.ClassInfo({name:"",localName:"",propertyInfos:[b.key,b.value]})
},unmarshalWrapperElement:function(e,f){var d=Jsonix.Model.AbstractElementsPropertyInfo.prototype.unmarshalWrapperElement.apply(this,arguments)
},unmarshal:function(h,g,i){var j=null;
var l=this;
var k=function(b){if(Jsonix.Util.Type.exists(b)){Jsonix.Util.Ensure.ensureObject(b,"Map property requires an object.");
if(!Jsonix.Util.Type.exists(j)){j={}
}for(var a in b){if(b.hasOwnProperty(a)){var c=b[a];
if(l.collection){if(!Jsonix.Util.Type.exists(j[a])){j[a]=[]
}j[a].push(c)
}else{if(!Jsonix.Util.Type.exists(j[a])){j[a]=c
}else{throw new Error("Value was already set.")
}}}}}};
if(Jsonix.Util.Type.exists(this.wrapperElementName)){this.unmarshalWrapperElement(h,i,k)
}else{this.unmarshalElement(h,i,k)
}return j
},unmarshalElement:function(g,h,j){var f=this.entryTypeInfo.unmarshal(g,h);
var i={};
if(!!f[this.key.name]){i[f[this.key.name]]=f[this.value.name]
}return j(i)
},marshal:function(g,f,e,h){if(!Jsonix.Util.Type.exists(e)){return
}if(Jsonix.Util.Type.exists(this.wrapperElementName)){h.writeStartElement(this.wrapperElementName)
}this.marshalElement(g,e,h);
if(Jsonix.Util.Type.exists(this.wrapperElementName)){h.writeEndElement()
}},marshalElement:function(j,p,n){if(!!p){for(var k in p){if(p.hasOwnProperty(k)){var i=p[k];
if(!this.collection){var o={};
o[this.key.name]=k;
o[this.value.name]=i;
n.writeStartElement(this.elementName);
this.entryTypeInfo.marshal(j,o,n);
n.writeEndElement()
}else{for(var l=0;
l<i.length;
l++){var m={};
m[this.key.name]=k;
m[this.value.name]=i[l];
n.writeStartElement(this.elementName);
this.entryTypeInfo.marshal(j,m,n);
n.writeEndElement()
}}}}}},doBuild:function(c,d){this.entryTypeInfo.build(c,d);
this.key=this.entryTypeInfo.properties[0];
this.value=this.entryTypeInfo.properties[1]
},buildStructureElements:function(c,d){d.elements[this.elementName.key]=this
},setProperty:function(h,l){if(Jsonix.Util.Type.exists(l)){Jsonix.Util.Ensure.ensureObject(l,"Map property requires an object.");
if(!Jsonix.Util.Type.exists(h[this.name])){h[this.name]={}
}var k=h[this.name];
for(var i in l){if(l.hasOwnProperty(i)){var g=l[i];
if(this.collection){if(!Jsonix.Util.Type.exists(k[i])){k[i]=[]
}for(var j=0;
j<g.length;
j++){k[i].push(g[j])
}}else{k[i]=g
}}}}},CLASS_NAME:"Jsonix.Model.ElementMapPropertyInfo"});
Jsonix.Model.AbstractElementRefsPropertyInfo=Jsonix.Class(Jsonix.Model.PropertyInfo,{wrapperElementName:null,mixed:false,initialize:function(b){Jsonix.Util.Ensure.ensureObject(b,"Options argument must be an object.");
Jsonix.Model.PropertyInfo.prototype.initialize.apply(this,[b]);
if(Jsonix.Util.Type.isObject(b.wrapperElementName)){Jsonix.Util.Ensure.ensureString(b.wrapperElementName.localPart,"Wrapper element name must contain a string property [localPart].");
this.wrapperElementName=Jsonix.XML.QName.fromObject(b.wrapperElementName)
}else{if(Jsonix.Util.Type.isString(b.wrapperElementName)){this.wrapperElementName=new Jsonix.XML.QName(this.defaultElementNamespaceURI,b.wrapperElementName)
}else{this.wrapperElementName=null
}}if(Jsonix.Util.Type.isBoolean(b.mixed)){this.mixed=b.mixed
}else{this.mixed=false
}},unmarshal:function(h,g,i){var j=i.eventType;
if(j===Jsonix.XML.Input.START_ELEMENT){if(Jsonix.Util.Type.exists(this.wrapperElementName)){return this.unmarshalWrapperElement(h,g,i)
}else{return this.unmarshalElement(h,g,i)
}}else{if(this.mixed&&(j===Jsonix.XML.Input.CHARACTERS||j===Jsonix.XML.Input.CDATA||j===Jsonix.XML.Input.ENTITY_REFERENCE)){var f=i.getText();
if(this.collection){return[f]
}else{return f
}}else{if(j===Jsonix.XML.Input.SPACE||j===Jsonix.XML.Input.COMMENT||j===Jsonix.XML.Input.PROCESSING_INSTRUCTION){}else{throw new Error("Illegal state: unexpected event type ["+j+"].")
}}}},unmarshalWrapperElement:function(l,k,n){var o=null;
var i=n.next();
while(i!==Jsonix.XML.Input.END_ELEMENT){if(i===Jsonix.XML.Input.START_ELEMENT){var j=this.unmarshalElement(l,k,n);
if(this.collection){if(o===null){o=[]
}for(var m=0;
m<j.length;
m++){o.push(j[m])
}}else{if(o===null){o=j
}else{throw new Error("Value already set.")
}}}else{if(this.mixed&&(i===Jsonix.XML.Input.CHARACTERS||i===Jsonix.XML.Input.CDATA||i===Jsonix.XML.Input.ENTITY_REFERENCE)){var p=n.getText();
if(this.collection){if(o===null){o=[]
}o.push(p)
}else{if(o===null){o=p
}else{throw new Error("Value already set.")
}}}else{if(i===Jsonix.XML.Input.SPACE||i===Jsonix.XML.Input.COMMENT||i===Jsonix.XML.Input.PROCESSING_INSTRUCTION){}else{throw new Error("Illegal state: unexpected event type ["+i+"].")
}}}i=n.next()
}return o
},unmarshalElement:function(h,g,j){var i=j.getName();
var k=this.getElementTypeInfo(h,g,i);
var l={name:i,value:k.unmarshal(h,j)};
if(this.collection){return[l]
}else{return l
}},marshal:function(h,g,k,j){if(Jsonix.Util.Type.exists(k)){if(Jsonix.Util.Type.exists(this.wrapperElementName)){j.writeStartElement(this.wrapperElementName)
}if(!this.collection){this.marshalItem(h,g,k,j)
}else{Jsonix.Util.Ensure.ensureArray(k,"Collection property requires an array value.");
for(var i=0;
i<k.length;
i++){var l=k[i];
this.marshalItem(h,g,l,j)
}}if(Jsonix.Util.Type.exists(this.wrapperElementName)){j.writeEndElement()
}}},marshalItem:function(g,f,e,h){if(Jsonix.Util.Type.isString(e)){if(!this.mixed){throw new Error("Property is not mixed, can't handle string values.")
}else{h.writeCharacters(e)
}}else{if(Jsonix.Util.Type.isObject(e)){this.marshalElement(g,f,e,h)
}else{if(this.mixed){throw new Error("Unsupported content type, either objects or strings are supported.")
}else{throw new Error("Unsupported content type, only objects are supported.")
}}}},marshalElement:function(h,g,k,i){var j=Jsonix.XML.QName.fromObject(k.name);
var l=this.getElementTypeInfo(h,g,j);
return this.marshalElementTypeInfo(h,k,j,l,i)
},marshalElementTypeInfo:function(g,j,i,f,h){h.writeStartElement(i);
if(Jsonix.Util.Type.exists(j.value)){f.marshal(g,j.value,h)
}h.writeEndElement()
},getElementTypeInfo:function(h,f,i){var g=this.getPropertyElementTypeInfo(i);
if(Jsonix.Util.Type.exists(g)){return g.typeInfo
}else{var j=h.getElementInfo(i,f);
if(Jsonix.Util.Type.exists(j)){return j.typeInfo
}else{throw new Error("Element ["+i.key+"] is not known in this context.")
}}},getPropertyElementTypeInfo:function(b){throw new Error("Abstract method [getPropertyElementTypeInfo].")
},buildStructure:function(c,d){Jsonix.Util.Ensure.ensureObject(d);
if(Jsonix.Util.Type.exists(d.value)){throw new Error("The structure already defines a value property.")
}else{if(!Jsonix.Util.Type.exists(d.elements)){d.elements={}
}}if(Jsonix.Util.Type.exists(this.wrapperElementName)){d.elements[this.wrapperElementName.key]=this
}else{this.buildStructureElements(c,d)
}if(this.mixed&&!Jsonix.Util.Type.exists(this.wrapperElementName)){d.mixed=this
}},buildStructureElements:function(c,d){throw new Error("Abstract method [buildStructureElements].")
},buildStructureElementTypeInfos:function(g,j,i){j.elements[i.elementName.key]=this;
var h=g.getSubstitutionMembers(i.elementName);
if(Jsonix.Util.Type.isArray(h)){for(var k=0;
k<h.length;
k++){var l=h[k];
this.buildStructureElementTypeInfos(g,j,l)
}}},CLASS_NAME:"Jsonix.Model.ElementRefPropertyInfo"});
Jsonix.Model.ElementRefPropertyInfo=Jsonix.Class(Jsonix.Model.AbstractElementRefsPropertyInfo,{typeInfo:"String",elementName:null,initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Model.AbstractElementRefsPropertyInfo.prototype.initialize.apply(this,[b]);
if(Jsonix.Util.Type.exists(b.typeInfo)){if(Jsonix.Util.Type.isObject(b.typeInfo)){Jsonix.Util.Ensure.ensureObject(b.typeInfo);
this.typeInfo=b.typeInfo
}else{Jsonix.Util.Ensure.ensureString(b.typeInfo);
this.typeInfo=b.typeInfo
}}if(Jsonix.Util.Type.isObject(b.elementName)){this.elementName=Jsonix.XML.QName.fromObject(b.elementName)
}else{if(Jsonix.Util.Type.isString(b.elementName)){this.elementName=new Jsonix.XML.QName(this.defaultElementNamespaceURI,b.elementName)
}else{this.elementName=new Jsonix.XML.QName(this.defaultElementNamespaceURI,this.name)
}}},getPropertyElementTypeInfo:function(d){Jsonix.Util.Ensure.ensureObject(d);
Jsonix.Util.Ensure.ensureString(d.localPart);
var c=Jsonix.XML.QName.fromObject(d);
if(c.key===this.elementName.key){return this
}else{return null
}},doBuild:function(c,d){this.typeInfo=c.resolveTypeInfo(this.typeInfo,d)
},buildStructureElements:function(c,d){this.buildStructureElementTypeInfos(c,d,this)
},CLASS_NAME:"Jsonix.Model.ElementRefPropertyInfo"});
Jsonix.Model.ElementRefsPropertyInfo=Jsonix.Class(Jsonix.Model.AbstractElementRefsPropertyInfo,{elementTypeInfos:null,elementTypeInfosMap:null,initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Model.AbstractElementRefsPropertyInfo.prototype.initialize.apply(this,[b]);
Jsonix.Util.Ensure.ensureArray(b.elementTypeInfos);
this.elementTypeInfos=b.elementTypeInfos
},getPropertyElementTypeInfo:function(d){Jsonix.Util.Ensure.ensureObject(d);
Jsonix.Util.Ensure.ensureString(d.localPart);
var f=Jsonix.XML.QName.fromObject(d);
var e=this.elementTypeInfosMap[f.key];
if(Jsonix.Util.Type.exists(e)){return{elementName:f,typeInfo:e}
}else{return null
}},doBuild:function(e,f){this.elementTypeInfosMap={};
for(var g=0;
g<this.elementTypeInfos.length;
g++){var h=this.elementTypeInfos[g];
h.typeInfo=e.resolveTypeInfo(h.typeInfo,f);
Jsonix.Util.Ensure.ensureObject(h);
if(Jsonix.Util.Type.isObject(h.elementName)){Jsonix.Util.Ensure.ensureString(h.elementName.localPart,"Element name must contain a string property [localPart].");
h.elementName=Jsonix.XML.QName.fromObject(h.elementName)
}else{Jsonix.Util.Ensure.ensureString(h.elementName);
h.elementName=new Jsonix.XML.QName(this.defaultElementNamespaceURI,h.elementName)
}this.elementTypeInfosMap[h.elementName.key]=h.typeInfo
}},buildStructureElements:function(e,h){for(var f=0;
f<this.elementTypeInfos.length;
f++){var g=this.elementTypeInfos[f];
this.buildStructureElementTypeInfos(e,h,g)
}},CLASS_NAME:"Jsonix.Model.ElementRefsPropertyInfo"});
Jsonix.Model.AnyElementPropertyInfo=Jsonix.Class(Jsonix.Model.PropertyInfo,{allowDom:true,allowTypedObject:true,mixed:true,initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Model.PropertyInfo.prototype.initialize.apply(this,[b]);
if(Jsonix.Util.Type.isBoolean(b.allowDom)){this.allowDom=b.allowDom
}else{this.allowDom=true
}if(Jsonix.Util.Type.isBoolean(b.allowTypedObject)){this.allowTypedObject=b.allowTypedObject
}else{this.allowTypedObject=true
}if(Jsonix.Util.Type.isBoolean(b.mixed)){this.mixed=b.mixed
}else{this.mixed=true
}},unmarshal:function(h,g,i){var j=i.eventType;
if(j===Jsonix.XML.Input.START_ELEMENT){return this.unmarshalElement(h,g,i)
}else{if(this.mixed&&(j===4||j===12||j===9)){var f=i.getText();
if(this.collection){return[f]
}else{return f
}}else{if(this.mixed&&(j===Jsonix.XML.Input.SPACE)){return null
}else{if(j===Jsonix.XML.Input.COMMENT||j===Jsonix.XML.Input.PROCESSING_INSTRUCTION){return null
}else{throw new Error("Illegal state: unexpected event type ["+j+"].")
}}}}},unmarshalElement:function(k,j,m){var l=m.getName();
var p;
if(this.allowTypedObject&&Jsonix.Util.Type.exists(k.getElementInfo(l,j))){var n=k.getElementInfo(l,j);
var i=n.typeInfo;
var o=Jsonix.Model.Adapter.getAdapter(n);
p={name:l,value:o.unmarshal(k,m,i)}
}else{if(this.allowDom){p=m.getElement()
}else{throw new Error("Element ["+l.toString()+"] is not known in this context and property does not allow DOM.")
}}if(this.collection){return[p]
}else{return p
}},marshal:function(g,f,j,i){if(!Jsonix.Util.Type.exists(j)){return
}if(!this.collection){this.marshalItem(g,j,i)
}else{Jsonix.Util.Ensure.ensureArray(j);
for(var h=0;
h<j.length;
h++){this.marshalItem(g,j[h],i)
}}},marshalItem:function(h,m,j){if(this.mixed&&Jsonix.Util.Type.isString(m)){j.writeCharacters(m)
}else{if(this.allowDom&&Jsonix.Util.Type.exists(m.nodeType)){j.writeNode(m)
}else{var i=Jsonix.XML.QName.fromObject(m.name);
if(this.allowTypedObject&&Jsonix.Util.Type.exists(h.getElementInfo(i))){var k=h.getElementInfo(i);
var n=k.typeInfo;
var l=Jsonix.Model.Adapter.getAdapter(k);
j.writeStartElement(i);
l.marshal(h,m.value,j,n);
j.writeEndElement()
}else{throw new Error("Element ["+i.toString()+"] is not known in this context")
}}}},doBuild:function(c,d){},buildStructure:function(c,d){Jsonix.Util.Ensure.ensureObject(d);
if(Jsonix.Util.Type.exists(d.value)){throw new Error("The structure already defines a value property.")
}else{if(!Jsonix.Util.Type.exists(d.elements)){d.elements={}
}}if((this.allowDom||this.allowTypedObject)){d.any=this
}if(this.mixed){d.mixed=this
}},CLASS_NAME:"Jsonix.Model.AnyElementPropertyInfo"});
Jsonix.Model.Module=Jsonix.Class({name:null,typeInfos:null,elementInfos:null,defaultElementNamespaceURI:"",defaultAttributeNamespaceURI:"",initialize:function(c){this.typeInfos=[];
this.elementInfos=[];
if(typeof c!=="undefined"){Jsonix.Util.Ensure.ensureObject(c);
if(Jsonix.Util.Type.isString(c.name)){this.name=c.name
}if(Jsonix.Util.Type.isString(c.defaultElementNamespaceURI)){this.defaultElementNamespaceURI=c.defaultElementNamespaceURI
}if(Jsonix.Util.Type.isString(c.defaultAttributeNamespaceURI)){this.defaultAttributeNamespaceURI=c.defaultAttributeNamespaceURI
}if(Jsonix.Util.Type.isArray(c.typeInfos)){this.initializeTypeInfos(c.typeInfos)
}for(var d in c){if(c.hasOwnProperty(d)){if(c[d] instanceof Jsonix.Model.ClassInfo){this.typeInfos.push(c[d])
}}}if(Jsonix.Util.Type.isArray(c.elementInfos)){this.initializeElementInfos(c.elementInfos)
}}},initializeTypeInfos:function(h){Jsonix.Util.Ensure.ensureArray(h);
var f,g,e;
for(f=0;
f<h.length;
f++){g=h[f];
e=this.createTypeInfo(g);
this.typeInfos.push(e)
}},initializeElementInfos:function(f){Jsonix.Util.Ensure.ensureArray(f);
var g,h,e;
for(g=0;
g<f.length;
g++){h=f[g];
e=this.createElementInfo(h);
this.elementInfos.push(e)
}},createTypeInfo:function(h){Jsonix.Util.Ensure.ensureObject(h);
var e;
if(h instanceof Jsonix.Model.TypeInfo){e=h
}else{Jsonix.Util.Ensure.ensureString(h.type);
var g=h.type;
if(Jsonix.Util.Type.isFunction(this.typeInfoCreators[g])){var f=this.typeInfoCreators[g];
e=f.call(this,h)
}else{throw new Error("Unknown type info type ["+g+"].")
}}return e
},createClassInfo:function(d){Jsonix.Util.Ensure.ensureObject(d);
if(!Jsonix.Util.Type.isString(d.defaultElementNamespaceURI)){d.defaultElementNamespaceURI=this.defaultElementNamespaceURI
}if(!Jsonix.Util.Type.isString(d.defaultAttributeNamespaceURI)){d.defaultAttributeNamespaceURI=this.defaultAttributeNamespaceURI
}if(Jsonix.Util.Type.isString(d.name)){if(!Jsonix.Util.Type.isString(d.localName)){if(Jsonix.Util.Type.isString(this.name)){if(d.name.indexOf(this.name+".")===0){d.localName=d.name.substring(this.name.length+1)
}else{d.localName=d.name
}}else{d.localName=d.name
}}}else{if(Jsonix.Util.Type.isString(d.localName)){if(Jsonix.Util.Type.isString(this.name)){d.name=this.name+"."+d.localName
}else{d.name=d.localName
}}else{throw new Error("Neither [name] nor [localName] was provided for the class info.")
}}var c=new Jsonix.Model.ClassInfo(d);
return c
},createList:function(g){Jsonix.Util.Ensure.ensureObject(g);
Jsonix.Util.Ensure.ensureExists(g.typeInfo);
var f=g.typeInfo;
var h=g.typeName||null;
var e=g.separator||" ";
return new Jsonix.Schema.XSD.List(f,h,e)
},createElementInfo:function(d){Jsonix.Util.Ensure.ensureObject(d);
Jsonix.Util.Ensure.ensureExists(d.elementName);
Jsonix.Util.Ensure.ensureExists(d.typeInfo);
if(Jsonix.Util.Type.isObject(d.elementName)){d.elementName=Jsonix.XML.QName.fromObject(d.elementName)
}else{if(Jsonix.Util.Type.isString(d.elementName)){d.elementName=new Jsonix.XML.QName(this.defaultElementNamespaceURI,d.elementName)
}else{throw new Error("Element info ["+d+"] must provide an element name.")
}}if(Jsonix.Util.Type.exists(d.substitutionHead)){if(Jsonix.Util.Type.isObject(d.substitutionHead)){d.substitutionHead=Jsonix.XML.QName.fromObject(d.substitutionHead)
}else{Jsonix.Util.Ensure.ensureString(d.substitutionHead);
d.substitutionHead=new Jsonix.XML.QName(this.defaultElementNamespaceURI,d.substitutionHead)
}}var c=new Jsonix.Model.ElementInfo(d);
return c
},registerTypeInfos:function(f){for(var d=0;
d<this.typeInfos.length;
d++){var e=this.typeInfos[d];
f.registerTypeInfo(e)
}},buildTypeInfos:function(f){for(var d=0;
d<this.typeInfos.length;
d++){var e=this.typeInfos[d];
e.build(f,this)
}},registerElementInfos:function(f){for(var d=0;
d<this.elementInfos.length;
d++){var e=this.elementInfos[d];
f.registerElementInfo(e)
}},buildElementInfos:function(f){for(var d=0;
d<this.elementInfos.length;
d++){var e=this.elementInfos[d];
e.build(f,this)
}},cs:function(){return this
},es:function(){return this
},CLASS_NAME:"Jsonix.Model.Module"});
Jsonix.Model.Module.prototype.typeInfoCreators={classInfo:Jsonix.Model.Module.prototype.createClassInfo,list:Jsonix.Model.Module.prototype.createList};
Jsonix.Context=Jsonix.Class({modules:[],typeInfos:null,elementInfos:null,properties:null,substitutionMembersMap:null,scopedElementInfosMap:null,initialize:function(j,f){this.modules=[];
this.elementInfos=[];
this.typeInfos={};
this.registerBuiltinTypeInfos();
this.properties={namespacePrefixes:{}};
this.substitutionMembersMap={};
this.scopedElementInfosMap={};
if(Jsonix.Util.Type.exists(f)){if(Jsonix.Util.Ensure.ensureObject(f)){if(Jsonix.Util.Type.isObject(f.namespacePrefixes)){this.properties.namespacePrefixes=f.namespacePrefixes
}}}if(Jsonix.Util.Type.exists(j)){Jsonix.Util.Ensure.ensureArray(j);
var h,i,g;
for(h=0;
h<j.length;
h++){i=j[h];
g=this.createModule(i);
this.modules[h]=g
}}this.processModules()
},createModule:function(d){var c;
if(d instanceof Jsonix.Model.Module){c=d
}else{c=new Jsonix.Model.Module(d)
}return c
},registerBuiltinTypeInfos:function(){for(var b=0;
b<this.builtinTypeInfos.length;
b++){this.registerTypeInfo(this.builtinTypeInfos[b])
}},processModules:function(){var d,c;
for(d=0;
d<this.modules.length;
d++){c=this.modules[d];
c.registerTypeInfos(this)
}for(d=0;
d<this.modules.length;
d++){c=this.modules[d];
c.buildTypeInfos(this)
}for(d=0;
d<this.modules.length;
d++){c=this.modules[d];
c.registerElementInfos(this)
}for(d=0;
d<this.modules.length;
d++){c=this.modules[d];
c.buildElementInfos(this)
}},registerTypeInfo:function(b){Jsonix.Util.Ensure.ensureObject(b);
Jsonix.Util.Ensure.ensureString(b.name);
this.typeInfos[b.name]=b
},resolveTypeInfo:function(d,f){if(!Jsonix.Util.Type.exists(d)){return null
}else{if(d instanceof Jsonix.Model.TypeInfo){return d
}else{if(Jsonix.Util.Type.isString(d)){if(!this.typeInfos[d]){throw new Error("Type info ["+d+"] is not known in this context.")
}else{return this.typeInfos[d]
}}else{Jsonix.Util.Ensure.ensureObject(f,"Type info mapping can only be resolved if module is provided.");
var e=f.createTypeInfo(d);
e.build(this,f);
return e
}}}},registerElementInfo:function(l){Jsonix.Util.Ensure.ensureObject(l);
this.elementInfos.push(l);
if(Jsonix.Util.Type.exists(l.substitutionHead)){var h=l.substitutionHead;
var g=h.key;
var i=this.substitutionMembersMap[g];
if(!Jsonix.Util.Type.isArray(i)){i=[];
this.substitutionMembersMap[g]=i
}i.push(l)
}var j;
if(Jsonix.Util.Type.exists(l.scope)){j=this.resolveTypeInfo(l.scope).name
}else{j="##global"
}var k=this.scopedElementInfosMap[j];
if(!Jsonix.Util.Type.isObject(k)){k={};
this.scopedElementInfosMap[j]=k
}k[l.elementName.key]=l
},getElementInfo:function(l,j){if(Jsonix.Util.Type.exists(j)){var o=j.name;
var p=this.scopedElementInfosMap[o];
if(Jsonix.Util.Type.exists(p)){var k=p[l.key];
if(Jsonix.Util.Type.exists(k)){return k
}}}var i="##global";
var m=this.scopedElementInfosMap[i];
if(Jsonix.Util.Type.exists(m)){var n=m[l.key];
if(Jsonix.Util.Type.exists(n)){return n
}}return null
},getSubstitutionMembers:function(b){return this.substitutionMembersMap[Jsonix.XML.QName.fromObject(b).key]
},createMarshaller:function(){return new Jsonix.Context.Marshaller(this)
},createUnmarshaller:function(){return new Jsonix.Context.Unmarshaller(this)
},builtinTypeInfos:[Jsonix.Schema.XSD.AnyType.INSTANCE,Jsonix.Schema.XSD.AnyURI.INSTANCE,Jsonix.Schema.XSD.Base64Binary.INSTANCE,Jsonix.Schema.XSD.Boolean.INSTANCE,Jsonix.Schema.XSD.Byte.INSTANCE,Jsonix.Schema.XSD.Calendar.INSTANCE,Jsonix.Schema.XSD.Date.INSTANCE,Jsonix.Schema.XSD.DateTime.INSTANCE,Jsonix.Schema.XSD.Decimal.INSTANCE,Jsonix.Schema.XSD.Double.INSTANCE,Jsonix.Schema.XSD.Duration.INSTANCE,Jsonix.Schema.XSD.Float.INSTANCE,Jsonix.Schema.XSD.GDay.INSTANCE,Jsonix.Schema.XSD.GMonth.INSTANCE,Jsonix.Schema.XSD.GMonthDay.INSTANCE,Jsonix.Schema.XSD.GYear.INSTANCE,Jsonix.Schema.XSD.GYearMonth.INSTANCE,Jsonix.Schema.XSD.HexBinary.INSTANCE,Jsonix.Schema.XSD.ID.INSTANCE,Jsonix.Schema.XSD.IDREF.INSTANCE,Jsonix.Schema.XSD.IDREFS.INSTANCE,Jsonix.Schema.XSD.Int.INSTANCE,Jsonix.Schema.XSD.Integer.INSTANCE,Jsonix.Schema.XSD.Language.INSTANCE,Jsonix.Schema.XSD.Long.INSTANCE,Jsonix.Schema.XSD.Name.INSTANCE,Jsonix.Schema.XSD.NCName.INSTANCE,Jsonix.Schema.XSD.NegativeInteger.INSTANCE,Jsonix.Schema.XSD.NMToken.INSTANCE,Jsonix.Schema.XSD.NMTokens.INSTANCE,Jsonix.Schema.XSD.NonNegativeInteger.INSTANCE,Jsonix.Schema.XSD.NonPositiveInteger.INSTANCE,Jsonix.Schema.XSD.NormalizedString.INSTANCE,Jsonix.Schema.XSD.Number.INSTANCE,Jsonix.Schema.XSD.PositiveInteger.INSTANCE,Jsonix.Schema.XSD.QName.INSTANCE,Jsonix.Schema.XSD.Short.INSTANCE,Jsonix.Schema.XSD.String.INSTANCE,Jsonix.Schema.XSD.Strings.INSTANCE,Jsonix.Schema.XSD.Time.INSTANCE,Jsonix.Schema.XSD.Token.INSTANCE,Jsonix.Schema.XSD.UnsignedByte.INSTANCE,Jsonix.Schema.XSD.UnsignedInt.INSTANCE,Jsonix.Schema.XSD.UnsignedLong.INSTANCE,Jsonix.Schema.XSD.UnsignedShort.INSTANCE],CLASS_NAME:"Jsonix.Context"});
Jsonix.Context.Marshaller=Jsonix.Class({context:null,initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
this.context=b
},marshalString:function(d){var f=this.marshalDocument(d);
var e=Jsonix.DOM.serialize(f);
return e
},marshalDocument:function(f){var d=new Jsonix.XML.Output({namespacePrefixes:this.context.properties.namespacePrefixes});
var e=d.writeStartDocument();
this.marshalElementNode(f,d);
d.writeEndDocument();
return e
},marshalElementNode:function(m,j){Jsonix.Util.Ensure.ensureObject(m);
Jsonix.Util.Ensure.ensureObject(m.name);
Jsonix.Util.Ensure.ensureString(m.name.localPart);
Jsonix.Util.Ensure.ensureExists(m.value);
var i=Jsonix.XML.QName.fromObject(m.name);
var k=this.context.getElementInfo(i);
if(!Jsonix.Util.Type.exists(k)){throw new Error("Could not find element declaration for the element ["+i.key+"].")
}Jsonix.Util.Ensure.ensureObject(k.typeInfo);
var n=k.typeInfo;
var h=j.writeStartElement(m.name);
var l=Jsonix.Model.Adapter.getAdapter(k);
l.marshal(this.context,m.value,j,n);
j.writeEndElement();
return h
},CLASS_NAME:"Jsonix.Context.Marshaller"});
Jsonix.Context.Unmarshaller=Jsonix.Class({context:null,initialize:function(b){Jsonix.Util.Ensure.ensureObject(b);
this.context=b
},unmarshalString:function(c){Jsonix.Util.Ensure.ensureString(c);
var d=Jsonix.DOM.parse(c);
return this.unmarshalDocument(d)
},unmarshalURL:function(f,e,d){Jsonix.Util.Ensure.ensureString(f);
Jsonix.Util.Ensure.ensureFunction(e);
if(Jsonix.Util.Type.exists(d)){Jsonix.Util.Ensure.ensureObject(d)
}that=this;
Jsonix.DOM.load(f,function(a){e(that.unmarshalDocument(a))
},d)
},unmarshalFile:function(e,f,g){Jsonix.Util.Ensure.ensureString(e);
Jsonix.Util.Ensure.ensureFunction(f);
if(Jsonix.Util.Type.exists(g)){Jsonix.Util.Ensure.ensureObject(g)
}that=this;
var h=require("fs");
h.readFile(e,g,function(b,a){if(b){throw b
}else{var c=a.toString();
var d=Jsonix.DOM.parse(c);
f(that.unmarshalDocument(d))
}})
},unmarshalDocument:function(e){var f=new Jsonix.XML.Input(e);
var d=null;
f.nextTag();
return this.unmarshalElementNode(f)
},unmarshalElementNode:function(i){if(i.eventType!=1){throw new Error("Parser must be on START_ELEMENT to read next text.")
}var l=null;
var h=Jsonix.XML.QName.fromObject(i.getName());
var j=this.context.getElementInfo(h);
if(!Jsonix.Util.Type.exists(j)){throw new Error("Could not find element declaration for the element ["+h.key+"].")
}Jsonix.Util.Ensure.ensureObject(j.typeInfo);
var m=j.typeInfo;
var k=Jsonix.Model.Adapter.getAdapter(j);
var n=k.unmarshal(this.context,i,m);
l={name:h,value:n};
return l
},CLASS_NAME:"Jsonix.Context.Unmarshaller"});

define("jsonix", function(){});

/*!
 * EventEmitter v4.2.7 - git.io/ee
 * Oliver Caldwell
 * MIT license
 * @preserve
 */

(function () {
	

	/**
	 * Class for managing events.
	 * Can be extended to provide event functionality in other classes.
	 *
	 * @class EventEmitter Manages event registering and emitting.
	 */
	function EventEmitter() {}

	// Shortcuts to improve speed and size
	var proto = EventEmitter.prototype;
	var exports = this;
	var originalGlobalValue = exports.EventEmitter;

	/**
	 * Finds the index of the listener for the event in it's storage array.
	 *
	 * @param {Function[]} listeners Array of listeners to search through.
	 * @param {Function} listener Method to look for.
	 * @return {Number} Index of the specified listener, -1 if not found
	 * @api private
	 */
	function indexOfListener(listeners, listener) {
		var i = listeners.length;
		while (i--) {
			if (listeners[i].listener === listener) {
				return i;
			}
		}

		return -1;
	}

	/**
	 * Alias a method while keeping the context correct, to allow for overwriting of target method.
	 *
	 * @param {String} name The name of the target method.
	 * @return {Function} The aliased method
	 * @api private
	 */
	function alias(name) {
		return function aliasClosure() {
			return this[name].apply(this, arguments);
		};
	}

	/**
	 * Returns the listener array for the specified event.
	 * Will initialise the event object and listener arrays if required.
	 * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
	 * Each property in the object response is an array of listener functions.
	 *
	 * @param {String|RegExp} evt Name of the event to return the listeners from.
	 * @return {Function[]|Object} All listener functions for the event.
	 */
	proto.getListeners = function getListeners(evt) {
		var events = this._getEvents();
		var response;
		var key;

		// Return a concatenated array of all matching events if
		// the selector is a regular expression.
		if (evt instanceof RegExp) {
			response = {};
			for (key in events) {
				if (events.hasOwnProperty(key) && evt.test(key)) {
					response[key] = events[key];
				}
			}
		}
		else {
			response = events[evt] || (events[evt] = []);
		}

		return response;
	};

	/**
	 * Takes a list of listener objects and flattens it into a list of listener functions.
	 *
	 * @param {Object[]} listeners Raw listener objects.
	 * @return {Function[]} Just the listener functions.
	 */
	proto.flattenListeners = function flattenListeners(listeners) {
		var flatListeners = [];
		var i;

		for (i = 0; i < listeners.length; i += 1) {
			flatListeners.push(listeners[i].listener);
		}

		return flatListeners;
	};

	/**
	 * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
	 *
	 * @param {String|RegExp} evt Name of the event to return the listeners from.
	 * @return {Object} All listener functions for an event in an object.
	 */
	proto.getListenersAsObject = function getListenersAsObject(evt) {
		var listeners = this.getListeners(evt);
		var response;

		if (listeners instanceof Array) {
			response = {};
			response[evt] = listeners;
		}

		return response || listeners;
	};

	/**
	 * Adds a listener function to the specified event.
	 * The listener will not be added if it is a duplicate.
	 * If the listener returns true then it will be removed after it is called.
	 * If you pass a regular expression as the event name then the listener will be added to all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to attach the listener to.
	 * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.addListener = function addListener(evt, listener) {
		var listeners = this.getListenersAsObject(evt);
		var listenerIsWrapped = typeof listener === 'object';
		var key;

		for (key in listeners) {
			if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
				listeners[key].push(listenerIsWrapped ? listener : {
					listener: listener,
					once: false
				});
			}
		}

		return this;
	};

	/**
	 * Alias of addListener
	 */
	proto.on = alias('addListener');

	/**
	 * Semi-alias of addListener. It will add a listener that will be
	 * automatically removed after it's first execution.
	 *
	 * @param {String|RegExp} evt Name of the event to attach the listener to.
	 * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.addOnceListener = function addOnceListener(evt, listener) {
		return this.addListener(evt, {
			listener: listener,
			once: true
		});
	};

	/**
	 * Alias of addOnceListener.
	 */
	proto.once = alias('addOnceListener');

	/**
	 * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
	 * You need to tell it what event names should be matched by a regex.
	 *
	 * @param {String} evt Name of the event to create.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.defineEvent = function defineEvent(evt) {
		this.getListeners(evt);
		return this;
	};

	/**
	 * Uses defineEvent to define multiple events.
	 *
	 * @param {String[]} evts An array of event names to define.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.defineEvents = function defineEvents(evts) {
		for (var i = 0; i < evts.length; i += 1) {
			this.defineEvent(evts[i]);
		}
		return this;
	};

	/**
	 * Removes a listener function from the specified event.
	 * When passed a regular expression as the event name, it will remove the listener from all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to remove the listener from.
	 * @param {Function} listener Method to remove from the event.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.removeListener = function removeListener(evt, listener) {
		var listeners = this.getListenersAsObject(evt);
		var index;
		var key;

		for (key in listeners) {
			if (listeners.hasOwnProperty(key)) {
				index = indexOfListener(listeners[key], listener);

				if (index !== -1) {
					listeners[key].splice(index, 1);
				}
			}
		}

		return this;
	};

	/**
	 * Alias of removeListener
	 */
	proto.off = alias('removeListener');

	/**
	 * Adds listeners in bulk using the manipulateListeners method.
	 * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
	 * You can also pass it a regular expression to add the array of listeners to all events that match it.
	 * Yeah, this function does quite a bit. That's probably a bad thing.
	 *
	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
	 * @param {Function[]} [listeners] An optional array of listener functions to add.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.addListeners = function addListeners(evt, listeners) {
		// Pass through to manipulateListeners
		return this.manipulateListeners(false, evt, listeners);
	};

	/**
	 * Removes listeners in bulk using the manipulateListeners method.
	 * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	 * You can also pass it an event name and an array of listeners to be removed.
	 * You can also pass it a regular expression to remove the listeners from all events that match it.
	 *
	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
	 * @param {Function[]} [listeners] An optional array of listener functions to remove.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.removeListeners = function removeListeners(evt, listeners) {
		// Pass through to manipulateListeners
		return this.manipulateListeners(true, evt, listeners);
	};

	/**
	 * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
	 * The first argument will determine if the listeners are removed (true) or added (false).
	 * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	 * You can also pass it an event name and an array of listeners to be added/removed.
	 * You can also pass it a regular expression to manipulate the listeners of all events that match it.
	 *
	 * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
	 * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
	 * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
		var i;
		var value;
		var single = remove ? this.removeListener : this.addListener;
		var multiple = remove ? this.removeListeners : this.addListeners;

		// If evt is an object then pass each of it's properties to this method
		if (typeof evt === 'object' && !(evt instanceof RegExp)) {
			for (i in evt) {
				if (evt.hasOwnProperty(i) && (value = evt[i])) {
					// Pass the single listener straight through to the singular method
					if (typeof value === 'function') {
						single.call(this, i, value);
					}
					else {
						// Otherwise pass back to the multiple function
						multiple.call(this, i, value);
					}
				}
			}
		}
		else {
			// So evt must be a string
			// And listeners must be an array of listeners
			// Loop over it and pass each one to the multiple method
			i = listeners.length;
			while (i--) {
				single.call(this, evt, listeners[i]);
			}
		}

		return this;
	};

	/**
	 * Removes all listeners from a specified event.
	 * If you do not specify an event then all listeners will be removed.
	 * That means every event will be emptied.
	 * You can also pass a regex to remove all events that match it.
	 *
	 * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.removeEvent = function removeEvent(evt) {
		var type = typeof evt;
		var events = this._getEvents();
		var key;

		// Remove different things depending on the state of evt
		if (type === 'string') {
			// Remove all listeners for the specified event
			delete events[evt];
		}
		else if (evt instanceof RegExp) {
			// Remove all events matching the regex.
			for (key in events) {
				if (events.hasOwnProperty(key) && evt.test(key)) {
					delete events[key];
				}
			}
		}
		else {
			// Remove all listeners in all events
			delete this._events;
		}

		return this;
	};

	/**
	 * Alias of removeEvent.
	 *
	 * Added to mirror the node API.
	 */
	proto.removeAllListeners = alias('removeEvent');

	/**
	 * Emits an event of your choice.
	 * When emitted, every listener attached to that event will be executed.
	 * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
	 * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
	 * So they will not arrive within the array on the other side, they will be separate.
	 * You can also pass a regular expression to emit to all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	 * @param {Array} [args] Optional array of arguments to be passed to each listener.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.emitEvent = function emitEvent(evt, args) {
		var listeners = this.getListenersAsObject(evt);
		var listener;
		var i;
		var key;
		var response;

		for (key in listeners) {
			if (listeners.hasOwnProperty(key)) {
				i = listeners[key].length;

				while (i--) {
					// If the listener returns true then it shall be removed from the event
					// The function is executed either with a basic call or an apply if there is an args array
					listener = listeners[key][i];

					if (listener.once === true) {
						this.removeListener(evt, listener.listener);
					}

					response = listener.listener.apply(this, args || []);

					if (response === this._getOnceReturnValue()) {
						this.removeListener(evt, listener.listener);
					}
				}
			}
		}

		return this;
	};

	/**
	 * Alias of emitEvent
	 */
	proto.trigger = alias('emitEvent');

	/**
	 * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
	 * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
	 *
	 * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	 * @param {...*} Optional additional arguments to be passed to each listener.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.emit = function emit(evt) {
		var args = Array.prototype.slice.call(arguments, 1);
		return this.emitEvent(evt, args);
	};

	/**
	 * Sets the current value to check against when executing listeners. If a
	 * listeners return value matches the one set here then it will be removed
	 * after execution. This value defaults to true.
	 *
	 * @param {*} value The new value to check for when executing listeners.
	 * @return {Object} Current instance of EventEmitter for chaining.
	 */
	proto.setOnceReturnValue = function setOnceReturnValue(value) {
		this._onceReturnValue = value;
		return this;
	};

	/**
	 * Fetches the current value to check against when executing listeners. If
	 * the listeners return value matches this one then it should be removed
	 * automatically. It will return true by default.
	 *
	 * @return {*|Boolean} The current value to check for or the default, true.
	 * @api private
	 */
	proto._getOnceReturnValue = function _getOnceReturnValue() {
		if (this.hasOwnProperty('_onceReturnValue')) {
			return this._onceReturnValue;
		}
		else {
			return true;
		}
	};

	/**
	 * Fetches the events object and creates one if required.
	 *
	 * @return {Object} The events storage object.
	 * @api private
	 */
	proto._getEvents = function _getEvents() {
		return this._events || (this._events = {});
	};

	/**
	 * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
	 *
	 * @return {Function} Non conflicting EventEmitter class.
	 */
	EventEmitter.noConflict = function noConflict() {
		exports.EventEmitter = originalGlobalValue;
		return EventEmitter;
	};

	// Expose the class either via AMD, CommonJS or the global object
	if (typeof define === 'function' && define.amd) {
		define('EventEmitter',[],function () {
			return EventEmitter;
		});
	}
	else if (typeof module === 'object' && module.exports){
		module.exports = EventEmitter;
	}
	else {
		this.EventEmitter = EventEmitter;
	}
}.call(this));

var _info_kwarc_sally_comm_core_factory = function () {
  var info_kwarc_sally_comm_core = {
    name: 'info_kwarc_sally_comm_core',
    defaultElementNamespaceURI: 'http:\/\/kwarc.info\/sally\/comm\/core',
    typeInfos: [{
        type: 'classInfo',
        localName: 'HeartbeatResponse',
        propertyInfos: []
      }, {
        type: 'classInfo',
        localName: 'HeartbeatRequest',
        propertyInfos: []
      }, {
        type: 'classInfo',
        localName: 'RegisterClientResponse',
        propertyInfos: [{
            type: 'element',
            name: 'sendQueue',
            elementName: 'SendQueue',
            typeInfo: 'String'
          }]
      }, {
        type: 'classInfo',
        localName: 'RegisterClientRequest',
        propertyInfos: [{
            type: 'element',
            name: 'listenQueue',
            elementName: 'ListenQueue',
            typeInfo: 'String'
          }, {
            type: 'element',
            name: 'schemas',
            collection: true,
            elementName: 'Schemas',
            typeInfo: 'String'
          }, {
            type: 'element',
            name: 'environmentID',
            elementName: 'EnvironmentID',
            typeInfo: 'String'
          }]
      }],
    elementInfos: [{
        elementName: 'HeartbeatResponse',
        typeInfo: 'info_kwarc_sally_comm_core.HeartbeatResponse'
      }, {
        elementName: 'HeartbeatRequest',
        typeInfo: 'info_kwarc_sally_comm_core.HeartbeatRequest'
      }, {
        elementName: 'RegisterClientResponse',
        typeInfo: 'info_kwarc_sally_comm_core.RegisterClientResponse'
      }, {
        elementName: 'RegisterClientRequest',
        typeInfo: 'info_kwarc_sally_comm_core.RegisterClientRequest'
      }]
  };
  return {
    info_kwarc_sally_comm_core: info_kwarc_sally_comm_core
  };
};
if (typeof define === 'function' && define.amd) {
  define('info_kwarc_sally_comm_core',[], _info_kwarc_sally_comm_core_factory);
}
else {
  if (typeof module !== 'undefined' && module.exports) {
    module.exports.info_kwarc_sally_comm_core = _info_kwarc_sally_comm_core_factory().info_kwarc_sally_comm_core;
  }
  else {
    var info_kwarc_sally_comm_core = _info_kwarc_sally_comm_core_factory().info_kwarc_sally_comm_core;
  }
};
// Generated by CoffeeScript 1.7.1
define('sally_client',['require','stomp','jsonix','EventEmitter','info_kwarc_sally_comm_core'],function(require) {
  var EventEmitter, SallyClient, connections, context, createRegisterDocument, heartBeatResponse, marshaller, unmarshaller, xmlns;
  require("stomp");
  require("jsonix");
  xmlns = new RegExp("xmlns(:(\\w+))?=\"http://kwarc.info/sally/comm/([\\w/:.]+)\"");
  EventEmitter = require("EventEmitter");
  require("info_kwarc_sally_comm_core");
  context = new Jsonix.Context([info_kwarc_sally_comm_core]);
  unmarshaller = context.createUnmarshaller();
  marshaller = context.createMarshaller();
  createRegisterDocument = function(docQueue, envid, schemas) {
    var schemaNames, x, _i, _len;
    schemaNames = [];
    for (_i = 0, _len = schemas.length; _i < _len; _i++) {
      x = schemas[_i];
      schemaNames.push(x.getName());
    }
    return {
      name: {
        localPart: "RegisterClientRequest",
        namespaceURI: "http://kwarc.info/sally/comm/core"
      },
      value: {
        "listenQueue": docQueue,
        "environmentID": envid,
        "schemas": schemaNames
      }
    };
  };
  heartBeatResponse = {
    name: {
      localPart: "HeartbeatResponse",
      namespaceURI: "http://kwarc.info/sally/comm/core"
    },
    value: {}
  };
  connections = {};
  return SallyClient = (function() {
    function SallyClient(config, msgHandler) {
      this.config = config;
      this.msgHandler = msgHandler;
      if (connections[config.stompUrl] != null) {
        this.stompClient = connections[config.stompUrl];
      } else {
        this.stompClient = Stomp.client(config.stompUrl);
        connections[config.stompUrl] = this.stompClient;
        this.stompClient.connect(config.stompUser, config.stompPassword, (function(frame) {
          return this.stompClient.connection_div.emit("onConnected");
        }).bind(this));
      }
    }

    SallyClient.prototype.register = function(schemas, envid, callback) {
      var client, me, schemaMap, x, _i, _len;
      this.schemas = schemas;
      me = this;
      client = this.stompClient;
      if (client.connected) {
        return callback();
      }
      if (client.connection_div == null) {
        client.connection_div = new EventEmitter();
      }
      schemaMap = {};
      for (_i = 0, _len = schemas.length; _i < _len; _i++) {
        x = schemas[_i];
        schemaMap[x.getName()] = x;
      }
      return client.connection_div.on("onConnected", (function(_this) {
        return function(e) {
          _this.privateQueue = "editor_tools_" + Math.floor(Math.random() * 100000);
          _this.stompClient.subscribe("/queue/" + _this.privateQueue, function(msg) {
            var body, handler, namespace;
            namespace = xmlns.exec(msg.body)[3];
            console.log(namespace, msg.body);
            if (namespace === "core") {
              body = unmarshaller.unmarshalString(msg.body);
              if (body.name.localPart === "HeartbeatRequest") {
                _this.send(msg.headers["reply-to"], marshaller.marshalString(heartBeatResponse), null, {
                  "correlation-id": msg.headers["correlation-id"]
                });
              }
            } else {
              handler = schemaMap[namespace];
              body = handler.unmarshal(msg.body);
              return handler.handleMessage(body, function(sendBack) {
                return _this.send(msg.headers["reply-to"], handler.marshal(sendBack), null, {
                  "correlation-id": msg.headers["correlation-id"]
                });
              });
            }
          });
          return _this.send("/queue/sally_register", marshaller.marshalString(createRegisterDocument(_this.privateQueue, envid, schemas)), function(msg) {
            var sally_queue, _fn, _j, _len1;
            sally_queue = msg.value.sendQueue;
            _fn = function(x) {
              return x.send = (function(_this) {
                return function(msg, callback, headers) {
                  return me.send(sally_queue, x.marshal(msg), callback, headers);
                };
              })(this);
            };
            for (_j = 0, _len1 = schemas.length; _j < _len1; _j++) {
              x = schemas[_j];
              _fn(x);
            }
            return callback();
          });
        };
      })(this));
    };

    SallyClient.prototype.send = function(destination, msg, callback, headers) {
      var corrid, queue_post, sub;
      if (callback != null) {
        corrid = Math.random();
        queue_post = "/temp-queue/editor_exchange" + corrid;
        sub = this.stompClient.subscribe(queue_post, (function(_this) {
          return function(msg) {
            var body;
            body = unmarshaller.unmarshalString(msg.body);
            if (callback(body, msg) === true) {
              return;
            }
            return _this.stompClient.unsubscribe(corrid);
          };
        })(this), {
          "id": corrid
        });
        if (headers == null) {
          headers = {};
        }
        headers["reply-to"] = queue_post;
        headers["correlation-id"] = corrid;
      }
      console.log("sending to ", destination, " msg ", msg);
      return this.stompClient.send(destination, headers, msg.toString());
    };

    return SallyClient;

  })();
});

